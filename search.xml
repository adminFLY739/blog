<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>py实验10</title>
      <link href="/blog/2024/5/11/py%E5%AE%9E%E9%AA%8C10/"/>
      <url>/blog/2024/5/11/py%E5%AE%9E%E9%AA%8C10/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">set</span> = <span class="built_in">set</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">set</span>))</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">w, x, y, z = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(w, x + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(y, z + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> q != <span class="number">0</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = <span class="built_in">input</span>().split()</span><br><span class="line">lst_ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst_ans:</span><br><span class="line">        lst_ans.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(lst_ans))</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">lst = [<span class="built_in">eval</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst]</span><br><span class="line">lst_ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst_ans <span class="keyword">and</span> i &gt;= <span class="number">6</span> <span class="keyword">and</span> i &lt;= <span class="number">10</span>:</span><br><span class="line">        lst_ans.append(i)</span><br><span class="line">lst_none = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>, <span class="number">11</span>) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst_ans]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst_none]))</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lst1 = <span class="built_in">input</span>().split()</span><br><span class="line">lst2 = <span class="built_in">input</span>().split()</span><br><span class="line">lst1 = [<span class="built_in">eval</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst1]</span><br><span class="line">lst2 = [<span class="built_in">eval</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst2]</span><br><span class="line">lst_ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst1:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst2 <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst_ans:</span><br><span class="line">        lst_ans.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst2:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst1 <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> lst_ans:</span><br><span class="line">        lst_ans.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst_ans]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py实验9</title>
      <link href="/blog/2024/5/10/py%E5%AE%9E%E9%AA%8C9/"/>
      <url>/blog/2024/5/10/py%E5%AE%9E%E9%AA%8C9/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>]</span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(array[num])</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;i&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;o&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;u&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">lst = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    i = i.lower()</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">        <span class="built_in">dict</span>[i] += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="string">&#x27;a&#x27;</span>], <span class="built_in">dict</span>[<span class="string">&#x27;e&#x27;</span>], <span class="built_in">dict</span>[<span class="string">&#x27;i&#x27;</span>], <span class="built_in">dict</span>[<span class="string">&#x27;o&#x27;</span>], <span class="built_in">dict</span>[<span class="string">&#x27;u&#x27;</span>])</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">number_to_words</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="built_in">dict</span> = &#123;<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;zero&#x27;</span>, <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;4&#x27;</span>:<span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;5&#x27;</span>:<span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;6&#x27;</span>:<span class="string">&#x27;six&#x27;</span>, <span class="string">&#x27;7&#x27;</span>:<span class="string">&#x27;seven&#x27;</span>, <span class="string">&#x27;8&#x27;</span>:<span class="string">&#x27;eight&#x27;</span>, <span class="string">&#x27;9&#x27;</span>:<span class="string">&#x27;nine&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">        number = -number</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;negative &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    number = <span class="built_in">str</span>(number)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">dict</span>[i], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">number_to_words(number)</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">formatted_print</span>(<span class="params">dictionary</span>):</span><br><span class="line">    <span class="comment"># 字典内容，item中第二个元素为依据，降序排列</span></span><br><span class="line">    lst = <span class="built_in">sorted</span>(dictionary.items(), key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;:10s&#125;&#123;:6.2f&#125;&quot;</span>.<span class="built_in">format</span>(lst[i][<span class="number">0</span>], lst[i][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    line = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    line = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="built_in">dict</span>[line[<span class="number">0</span>]] = <span class="built_in">float</span>(line[<span class="number">1</span>])</span><br><span class="line">formatted_print(<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lst = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">in</span> d:</span><br><span class="line">        d[x] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d[x] = <span class="number">1</span></span><br><span class="line">counts = <span class="built_in">sorted</span>(d.items(), key = <span class="keyword">lambda</span> item:item[<span class="number">0</span>], reverse = <span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(counts)):</span><br><span class="line">    <span class="built_in">print</span>(counts[i][<span class="number">0</span>], <span class="string">&#x27;:&#x27;</span>, counts[i][<span class="number">1</span>], sep = <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">article = <span class="built_in">input</span>()</span><br><span class="line">lst = article.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27; &#x27;</span>).split()</span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> lst:</span><br><span class="line">    length = <span class="built_in">len</span>(word)</span><br><span class="line">    <span class="keyword">if</span> length <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">        <span class="built_in">dict</span>[length] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">dict</span>[length] = <span class="number">1</span></span><br><span class="line">total_length = <span class="number">0</span></span><br><span class="line">total_words = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">dict</span>.keys(), reverse = <span class="literal">False</span>):</span><br><span class="line">    count = <span class="built_in">dict</span>[length]</span><br><span class="line">    total_length += length * count</span><br><span class="line">    total_words += count</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span>, length, <span class="string">&quot;,&quot;</span>, count, <span class="string">&quot;)&quot;</span>, sep = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(total_length, <span class="string">&quot;/&quot;</span>, total_words, sep=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">lst = <span class="built_in">input</span>()</span><br><span class="line">letter = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> lst:</span><br><span class="line">    char = char.lower()</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> letter:</span><br><span class="line">            letter[char] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            letter[char] += <span class="number">1</span></span><br><span class="line"><span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">max_letter = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># sorted返回可迭代对象的排序列表</span></span><br><span class="line">letter = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(letter.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>], reverse=<span class="literal">False</span>))</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> letter:</span><br><span class="line">    <span class="keyword">if</span> letter[key] &gt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">max</span> = letter[key]</span><br><span class="line">        max_letter = key</span><br><span class="line"><span class="built_in">print</span>(max_letter)</span><br></pre></td></tr></table></figure><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">letter = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">0</span>,<span class="string">&#x27;i&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;j&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;q&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">0</span>,  <span class="string">&#x27;u&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        letter[char] += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">sorted</span>(letter.keys()):</span><br><span class="line">    <span class="built_in">print</span>(l, <span class="string">&quot;:&quot;</span>, letter[l], sep=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>78.子集</title>
      <link href="/blog/2024/5/9/78-%E5%AD%90%E9%9B%86/"/>
      <url>/blog/2024/5/9/78-%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>461.汉明距离</title>
      <link href="/blog/2024/5/8/461-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/"/>
      <url>/blog/2024/5/8/461-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// myself</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hammingDistance_1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x || y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> != y % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        x /= <span class="number">2</span>;</span><br><span class="line">        y /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内置位计数功能</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hammingDistance_2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> __builtin_popcount(x ^ y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移位实现位计数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hammingDistance_3</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = x ^ y;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (z)</span><br><span class="line">    &#123;</span><br><span class="line">        count += z &amp; <span class="number">1</span>;</span><br><span class="line">        z &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Brian Kernighan 算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hammingDistance_4</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = x ^ y;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (z)</span><br><span class="line">    &#123;</span><br><span class="line">        z &amp;= z - <span class="number">1</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, hammingDistance(x, y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py实验8</title>
      <link href="/blog/2024/4/19/py%E5%AE%9E%E9%AA%8C8/"/>
      <url>/blog/2024/4/19/py%E5%AE%9E%E9%AA%8C8/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>().split()</span><br><span class="line">MAX = -<span class="number">1000</span></span><br><span class="line">MIN = <span class="number">1000</span></span><br><span class="line">iM = <span class="number">0</span></span><br><span class="line">im = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    value = <span class="built_in">eval</span>(<span class="built_in">list</span>[i])</span><br><span class="line">    <span class="keyword">if</span> value &gt; MAX:</span><br><span class="line">        MAX = value</span><br><span class="line">        iM = i</span><br><span class="line">    <span class="keyword">if</span> value &lt; MIN:</span><br><span class="line">        MIN = value</span><br><span class="line">        im = i</span><br><span class="line"><span class="built_in">print</span>(MAX, iM)</span><br><span class="line"><span class="built_in">print</span>(MIN, im)</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="built_in">list</span>.insert(<span class="number">0</span>, <span class="built_in">eval</span>(<span class="built_in">list</span>[-<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">list</span>.pop(-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>[i], end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">eval</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>]</span><br><span class="line"><span class="built_in">list</span>.sort(reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[k-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>().split()</span><br><span class="line">list1 = []</span><br><span class="line">list2 = []</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">eval</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">list</span>]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>[i] % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        list1.append(<span class="built_in">list</span>[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list2.append(<span class="built_in">list</span>[i])</span><br><span class="line">listans = list2 + list1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">str</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> listans))</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">eval</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="built_in">sum</span> += <span class="built_in">list</span>[i]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">list</span>) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span> / <span class="built_in">len</span>(<span class="built_in">list</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>((<span class="built_in">list</span>[<span class="built_in">len</span>(<span class="built_in">list</span>) // <span class="number">2</span> - <span class="number">1</span>] / <span class="number">2</span> + <span class="built_in">list</span>[<span class="built_in">len</span>(<span class="built_in">list</span>) // <span class="number">2</span>] / <span class="number">2</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;)&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span> / <span class="built_in">len</span>(<span class="built_in">list</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>[<span class="built_in">len</span>(<span class="built_in">list</span>) // <span class="number">2</span>], end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;)&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">eval</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">list</span>]</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    <span class="built_in">sum</span> += <span class="built_in">list</span>[i]</span><br><span class="line">mean = <span class="built_in">sum</span> / <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line">deviation = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">    deviation += (<span class="built_in">list</span>[i] - mean) ** <span class="number">2</span></span><br><span class="line">deviation = (deviation / (<span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span>)) ** <span class="number">0.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % mean)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % deviation)</span><br></pre></td></tr></table></figure><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">matrix = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    matrix.append([])</span><br><span class="line">    line = [<span class="built_in">eval</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        matrix[i].append(line[j])</span><br><span class="line">matrixp = deepcopy(matrix)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> i != n - <span class="number">1</span> <span class="keyword">and</span> j != <span class="number">0</span> <span class="keyword">and</span> j != m - <span class="number">1</span>:</span><br><span class="line">            matrixp[i][j] = <span class="built_in">round</span>((matrix[i][j] + matrix[i - <span class="number">1</span>][j] + matrix[i + <span class="number">1</span>][j] + matrix[i][j - <span class="number">1</span>] + matrix[i][j + <span class="number">1</span>]) / <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">print</span>(matrixp[i][j], end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">matrix = []</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    matrix.append([])</span><br><span class="line">    line = [<span class="built_in">eval</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        matrix[i].append(line[j])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> j != <span class="number">0</span> <span class="keyword">and</span> i != m - <span class="number">1</span> <span class="keyword">and</span> j != n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] &gt; matrix[i - <span class="number">1</span>][j] <span class="keyword">and</span> matrix[i][j] &gt; matrix[i + <span class="number">1</span>][j] <span class="keyword">and</span> matrix[i][j] &gt; matrix[i][j - <span class="number">1</span>] <span class="keyword">and</span> matrix[i][j] &gt; matrix[i][j + <span class="number">1</span>]:</span><br><span class="line">                ans.append(matrix[i][j])</span><br><span class="line">                ans.append(i + <span class="number">1</span>)</span><br><span class="line">                ans.append(j + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ans) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;None&quot;</span>, m, n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ans)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(ans[i - <span class="number">2</span>], ans[i - <span class="number">1</span>], ans[i])</span><br></pre></td></tr></table></figure><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">matrix = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    matrix.append([])</span><br><span class="line">    line = [<span class="built_in">int</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        matrix[i].append(line[j])</span><br><span class="line">ans = [<span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;X&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">matrix, n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] != matrix[i][<span class="number">0</span>]:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> ans[matrix[i][<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] != matrix[<span class="number">0</span>][j]:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> ans[matrix[<span class="number">0</span>][j]]</span><br><span class="line"></span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> matrix[i][i] != matrix[<span class="number">0</span>][<span class="number">0</span>]:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> ans[matrix[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> matrix[i][n - i - <span class="number">1</span>] != matrix[<span class="number">0</span>][n - <span class="number">1</span>]:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> ans[matrix[<span class="number">0</span>][n - <span class="number">1</span>]]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NIL&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(check(matrix, n))</span><br></pre></td></tr></table></figure><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># m = []</span></span><br><span class="line"><span class="comment"># for i in range(2):</span></span><br><span class="line"><span class="comment">#     m.append([])</span></span><br><span class="line"><span class="comment">#     line = [value for value in input().split()]</span></span><br><span class="line"><span class="comment">#     for j in range(4):</span></span><br><span class="line"><span class="comment">#         m[i].append(line[j])</span></span><br><span class="line"><span class="comment"># for lst in m:</span></span><br><span class="line"><span class="comment">#     lst.reverse()</span></span><br><span class="line"><span class="comment">#     m[m.index(lst)] = tuple(lst)</span></span><br><span class="line"><span class="comment"># print(tuple(m))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_to_tuples</span>(<span class="params">two_dimensional_list</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(<span class="built_in">tuple</span>(<span class="built_in">reversed</span>(sublist)) <span class="keyword">for</span> sublist <span class="keyword">in</span> two_dimensional_list)</span><br><span class="line"></span><br><span class="line">lines = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        line = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lines.append(line.split())</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">result = list_to_tuples(lines)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py实验7</title>
      <link href="/blog/2024/4/11/py%E5%AE%9E%E9%AA%8C7/"/>
      <url>/blog/2024/4/11/py%E5%AE%9E%E9%AA%8C7/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="built_in">input</span>()</span><br><span class="line">ch = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(string.count(ch))</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ch = <span class="built_in">input</span>()</span><br><span class="line">string = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> string.rfind(ch) == -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not Found&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index =&quot;</span>, string.rfind(ch))</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> ch.isdigit():</span><br><span class="line">        <span class="built_in">print</span>(ch, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    ATGC = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> ATGC:</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;T&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ch == <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ch == <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;C&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ch == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;G&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">string = <span class="built_in">str</span>.lower()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(i + <span class="number">97</span>) == ch:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(i + <span class="number">97</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;:&quot;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">stringMax = <span class="string">&quot;&quot;</span></span><br><span class="line">string_1 = <span class="built_in">input</span>()</span><br><span class="line">string_2 = <span class="built_in">input</span>()</span><br><span class="line">string_3 = <span class="built_in">input</span>()</span><br><span class="line">string_4 = <span class="built_in">input</span>()</span><br><span class="line">string_5 = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> string_1 &gt; string_2 <span class="keyword">and</span> string_1 &gt; string_3 <span class="keyword">and</span> string_1 &gt; string_4 <span class="keyword">and</span> string_1 &gt; string_5:</span><br><span class="line">    stringMax = string_1</span><br><span class="line"><span class="keyword">elif</span> string_2 &gt; string_1 <span class="keyword">and</span> string_2 &gt; string_3 <span class="keyword">and</span> string_2 &gt; string_4 <span class="keyword">and</span> string_2 &gt; string_5:</span><br><span class="line">    stringMax = string_2</span><br><span class="line"><span class="keyword">elif</span> string_3 &gt; string_1 <span class="keyword">and</span> string_3 &gt; string_2 <span class="keyword">and</span> string_3 &gt; string_4 <span class="keyword">and</span> string_3 &gt; string_5:</span><br><span class="line">    stringMax = string_3</span><br><span class="line"><span class="keyword">elif</span> string_4 &gt; string_1 <span class="keyword">and</span> string_4 &gt; string_2 <span class="keyword">and</span> string_4 &gt; string_3 <span class="keyword">and</span> string_4 &gt; string_5:</span><br><span class="line">    stringMax = string_4</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    stringMax = string_5</span><br><span class="line"><span class="built_in">print</span>(stringMax)</span><br></pre></td></tr></table></figure><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_anagram</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> str1:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> str2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> str2:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> str1:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    str1 = <span class="built_in">input</span>()</span><br><span class="line">    str2 = <span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(is_anagram(str1, str2))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_acronym</span>(<span class="params">ph</span>):</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    phrase = ph.title()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> phrase:</span><br><span class="line">        <span class="keyword">if</span> ch.isupper():</span><br><span class="line">            <span class="built_in">list</span>.append(ch)</span><br><span class="line">    ans = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    phrase=<span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(is_acronym(phrase))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    string = <span class="built_in">str</span>.upper()</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():</span><br><span class="line">            num += <span class="built_in">ord</span>(ch) - <span class="number">64</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prefix</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(str1) <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(str2):</span><br><span class="line">        <span class="keyword">if</span> str1[i] != str2[i]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> str1[:i]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    str1 = <span class="built_in">input</span>()</span><br><span class="line">    str2 = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> prefix(str1, str2):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No common prefix&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(prefix(str1, str2))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py实验6</title>
      <link href="/blog/2024/4/7/py%E5%AE%9E%E9%AA%8C6/"/>
      <url>/blog/2024/4/7/py%E5%AE%9E%E9%AA%8C6/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">turtle.title(<span class="string">&quot;绘制三角形&quot;</span>)</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">t.up()</span><br><span class="line">t.goto(-<span class="number">100</span>, -<span class="number">50</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">t.forward(<span class="number">200</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">200</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">200</span>)</span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">turtle.title(<span class="string">&quot;绘制套圈图形&quot;</span>)</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">t.circle(<span class="number">10</span>)</span><br><span class="line">t.circle(<span class="number">50</span>)</span><br><span class="line">t.circle(<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">130</span>)</span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">turtle.title(<span class="string">&quot;绘制嵌套六角形&quot;</span>)</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line">t.color(<span class="string">&quot;navy&quot;</span>)</span><br><span class="line">lenth = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">    t.forward(lenth)</span><br><span class="line">    lenth += <span class="number">3</span></span><br><span class="line">    t.left(<span class="number">60</span>)</span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">turtle.title(<span class="string">&quot;绘制小黄车&quot;</span>)</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line">t.color(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">t.forward(<span class="number">140</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">140</span>)</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">t.forward(<span class="number">140</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">140</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">180</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(-<span class="number">120</span>, <span class="number">0</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.circle(<span class="number">20</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.goto(-<span class="number">70</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.circle(<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">140</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.forward(<span class="number">180</span>)</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">t.forward(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">160</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.right(<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">20</span>)</span><br><span class="line">t.up()</span><br><span class="line">t.goto(<span class="number">210</span>, <span class="number">0</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.circle(<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">koch</span>(<span class="params">n, lenth</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        t.forward(lenth)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        koch(n - <span class="number">1</span>, lenth / <span class="number">3</span>)</span><br><span class="line">        t.left(<span class="number">60</span>)</span><br><span class="line">        koch(n - <span class="number">1</span>, lenth / <span class="number">3</span>)</span><br><span class="line">        t.right(<span class="number">120</span>)</span><br><span class="line">        koch(n - <span class="number">1</span>, lenth / <span class="number">3</span>)</span><br><span class="line">        t.left(<span class="number">60</span>)</span><br><span class="line">        koch(n - <span class="number">1</span>, lenth / <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">turtle.setup(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">turtle.title(<span class="string">&quot;koch&quot;</span>)</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">t.up()</span><br><span class="line">t.goto(-<span class="number">150</span>, -<span class="number">70</span>)</span><br><span class="line">t.down()</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">koch(n, <span class="number">300</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">koch(n, <span class="number">300</span>)</span><br><span class="line">t.right(<span class="number">120</span>)</span><br><span class="line">koch(n, <span class="number">300</span>)</span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py实验5</title>
      <link href="/blog/2024/4/3/py%E5%AE%9E%E9%AA%8C5/"/>
      <url>/blog/2024/4/3/py%E5%AE%9E%E9%AA%8C5/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_area</span>(<span class="params">a, b, c, d, alpha</span>):</span><br><span class="line">    p = (a + b + c + d) / <span class="number">2</span></span><br><span class="line">    area = ((p - a) * (p - b) * (p - c) * (p - d) - a * b * c * d * math.cos(alpha) ** <span class="number">2</span>) ** (<span class="number">1</span> / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    b = <span class="number">4</span></span><br><span class="line">    c = <span class="number">5</span></span><br><span class="line">    d = <span class="number">5</span></span><br><span class="line">    alpha = math.radians(<span class="number">145</span>)</span><br><span class="line">    <span class="built_in">print</span>(compute_area(a, b, c, d, alpha))</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">value</span>):</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">while</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            temp = value % <span class="number">10</span></span><br><span class="line">            ans = ans * <span class="number">10</span> + temp</span><br><span class="line">            value = value // <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value *= -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            temp = value % <span class="number">10</span></span><br><span class="line">            ans = ans * <span class="number">10</span> + temp</span><br><span class="line">            value = value // <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> ans * (-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    value = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(reverse(value))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">sum</span> += (-<span class="number">1</span>) ** (i + <span class="number">1</span>) / (<span class="number">2</span> * i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    i = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%.4f&quot;</span> % (<span class="number">4</span> * m(i)))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">total</span>(<span class="params">a = <span class="number">0</span>, b = <span class="number">100</span>, c = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(total())</span><br><span class="line">    <span class="built_in">print</span>(total(<span class="number">6</span>))</span><br><span class="line">    <span class="built_in">print</span>(total(<span class="number">6</span>, <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(total(<span class="number">6</span>, <span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_digit</span>(<span class="params">number, digit</span>):</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    number = <span class="built_in">abs</span>(number)</span><br><span class="line">    <span class="keyword">while</span> number &gt; <span class="number">0</span>:</span><br><span class="line">        temp = number % <span class="number">10</span></span><br><span class="line">        number = number // <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> temp == digit:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, d = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    c = count_digit(n, d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Number of digit &#123;0&#125; in &#123;1&#125;: &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(d, n, c))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">number</span>):</span><br><span class="line">    re_number = <span class="number">0</span></span><br><span class="line">    Number = number</span><br><span class="line">    <span class="keyword">while</span> number &gt; <span class="number">0</span>:</span><br><span class="line">        temp = number % <span class="number">10</span></span><br><span class="line">        re_number = re_number * <span class="number">10</span> + temp</span><br><span class="line">        number = number // <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> re_number == Number</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    value = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(is_palindrome(value))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_perfect_number</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">sum</span> += i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span> == n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    line = <span class="built_in">input</span>().split()</span><br><span class="line">    n = <span class="built_in">int</span>(line[<span class="number">0</span>])</span><br><span class="line">    m = <span class="built_in">int</span>(line[<span class="number">1</span>])</span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> is_perfect_number(i):</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="built_in">print</span>(i, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_ugly</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                n = n // <span class="number">2</span></span><br><span class="line">            <span class="keyword">elif</span> n % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                n = n // <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> n % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">                n = n // <span class="number">5</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> n != <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(is_ugly(n))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square_root</span>(<span class="params">value</span>):</span><br><span class="line">    lastguess = <span class="number">1.0</span></span><br><span class="line">    nextguess = (lastguess + value / lastguess) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">abs</span>(nextguess - lastguess) &gt;= <span class="number">0.000001</span>:</span><br><span class="line">        lastguess = nextguess</span><br><span class="line">        nextguess = (lastguess + value / lastguess) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> nextguess</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    value = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">format</span>(square_root(value), <span class="string">&quot;.6f&quot;</span>))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">sum</span> += (-<span class="number">1</span>) ** (i - <span class="number">1</span>) * x ** i</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    line = <span class="built_in">input</span>().split()</span><br><span class="line">    x = <span class="built_in">float</span>(line[<span class="number">0</span>])</span><br><span class="line">    n = <span class="built_in">int</span>(line[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % (f(x, n)))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C of Micro_Frank</title>
      <link href="/blog/2024/4/1/c-of-micro-frank/"/>
      <url>/blog/2024/4/1/c-of-micro-frank/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><blockquote><p>今天是不是都tm进阿里了?</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="structure"><a href="#structure" class="headerlink" title="structure"></a>structure</h2><h3 id="stdio"><a href="#stdio" class="headerlink" title="stdio"></a><strong>stdio</strong></h3><p>standard input&amp;output</p><h3 id="preprocessor-instructions"><a href="#preprocessor-instructions" class="headerlink" title="preprocessor instructions"></a><strong>preprocessor instructions</strong></h3><p><code>#include &lt;stdio.h&gt;</code> </p><h3 id="function"><a href="#function" class="headerlink" title="function"></a><strong>function</strong></h3><ul><li>复用性</li></ul><h4 id="石头剪刀布"><a href="#石头剪刀布" class="headerlink" title="石头剪刀布"></a>石头剪刀布</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROCK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAPER 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCISSORS 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S 2000</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_instructions</span><span class="params">()</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">get_player_move</span><span class="params">()</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">get_computer_move</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_choice</span><span class="params">(<span class="type">uint32_t</span> choice)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">determine_winner</span><span class="params">(<span class="type">uint32_t</span> player_move, <span class="type">uint32_t</span> computer_move)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">print_instructions();</span><br><span class="line"><span class="type">uint32_t</span> player_move = get_player_move();</span><br><span class="line"><span class="type">uint32_t</span> computer_move = get_computer_move();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;你的选择 vs 电脑的选择&quot;</span>);</span><br><span class="line">print_choice(player_move);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;     vs     &quot;</span>);</span><br><span class="line">print_choice(computer_move);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">determine_winner(player_move, computer_move);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[H\033[J&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_instructions</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;请输入：1代表石头，2代表布，3代表剪刀&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">get_player_move</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> choice;</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu32, &amp;choice);</span><br><span class="line"><span class="keyword">while</span> (choice &lt; ROCK || choice &gt; SCISSORS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[H\033[J&quot;</span>);</span><br><span class="line">print_instructions();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;只能输入1, 2, 3哦&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu32, &amp;choice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">get_computer_move</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (rand() % <span class="number">3</span>) + ROCK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_choice</span><span class="params">(<span class="type">uint32_t</span> choice)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (choice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> ROCK:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;石头&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PAPER:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;布&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SCISSORS:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;剪刀&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">determine_winner</span><span class="params">(<span class="type">uint32_t</span> player_move, <span class="type">uint32_t</span> computer_move)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (player_move == computer_move)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;打了个平手&quot;</span>);</span><br><span class="line">Sleep(S);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数组的妙用：规则映射</span></span><br><span class="line"><span class="type">uint32_t</span> winner[<span class="number">4</span>] = &#123; <span class="number">0</span>, SCISSORS, ROCK, PAPER &#125;;</span><br><span class="line"><span class="keyword">if</span> (computer_move == winner[player_move])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;孩子，你赢了!&quot;</span>);</span><br><span class="line">Sleep(S);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;孩子，不如电脑啊!&quot;</span>);</span><br><span class="line">Sleep(S);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="declaration"><a href="#declaration" class="headerlink" title="declaration"></a><strong>declaration</strong></h3><p><code>int number;</code> </p><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a><strong>definition</strong></h3><p><code>int number = 123;</code> </p><h3 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a><strong>assignment</strong></h3><p><code>number = 123;</code> </p><h3 id="control"><a href="#control" class="headerlink" title="control"></a><strong>control</strong></h3><h3 id="null"><a href="#null" class="headerlink" title="null"></a><strong>null</strong></h3><p><code>;</code> </p><h3 id="identifier"><a href="#identifier" class="headerlink" title="identifier"></a><strong>identifier</strong></h3><p><code>number</code> </p><ol><li>驼峰命名法</li><li>下划线命名法</li></ol><h3 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a><strong>keyword</strong></h3><p><code>int</code> </p><h3 id="return-0"><a href="#return-0" class="headerlink" title="return 0"></a><strong>return 0</strong></h3><p>end</p><h2 id="固定宽度整数类型"><a href="#固定宽度整数类型" class="headerlink" title="固定宽度整数类型"></a>固定宽度整数类型</h2><h3 id="signed-int-signed-int"><a href="#signed-int-signed-int" class="headerlink" title="signed int&#x2F;signed&#x2F;int"></a>signed int&#x2F;signed&#x2F;int</h3><p>4B &#x3D; 32b</p><p>-2^31^ ~2^31^ -1</p><p><code>%o</code> 八进制</p><p><code>%d</code> 十进制</p><p><code>%#x</code>, <code>%#X</code> 十六进制(格式修饰符)</p><h3 id="unsigned-int-unsigned"><a href="#unsigned-int-unsigned" class="headerlink" title="unsigned int&#x2F;unsigned"></a>unsigned int&#x2F;unsigned</h3><p>0~2^32^ -1</p><p><code>%u</code> </p><p>索引</p><h3 id="signed-short-int-signed-short-short-int-short"><a href="#signed-short-int-signed-short-short-int-short" class="headerlink" title="signed short int&#x2F;signed short&#x2F;short int&#x2F;short"></a>signed short int&#x2F;signed short&#x2F;short int&#x2F;short</h3><p>-2^15^ ~2^15^ -1</p><p><code>%hd</code> </p><h3 id="unsigned-short-int-unsigned-short"><a href="#unsigned-short-int-unsigned-short" class="headerlink" title="unsigned short int&#x2F;unsigned short"></a>unsigned short int&#x2F;unsigned short</h3><p>0~2^16^ -1</p><p><code>%hu</code> </p><p>游戏像素数据</p><h3 id="signed-long-int-signed-long-long-int-long"><a href="#signed-long-int-signed-long-long-int-long" class="headerlink" title="signed long int&#x2F;signed long&#x2F;long int&#x2F;long"></a>signed long int&#x2F;signed long&#x2F;long int&#x2F;long</h3><p><code>%ld</code> </p><p>32位CPU: 4B</p><p>64位CPU: 8B</p><h3 id="unsigned-long-int-unsigned-long"><a href="#unsigned-long-int-unsigned-long" class="headerlink" title="unsigned long int&#x2F;unsigned long"></a>unsigned long int&#x2F;unsigned long</h3><p><code>%lu</code> </p><p>32位CPU: 4B</p><p>64位CPU: 8B</p><h3 id="long-long"><a href="#long-long" class="headerlink" title="long long"></a>long long</h3><p><code>%lld</code> </p><p>32位CPU: 8B</p><p>64位CPU: 8B</p><h3 id="unsigned-long-long"><a href="#unsigned-long-long" class="headerlink" title="unsigned long long"></a>unsigned long long</h3><p><code>%llu</code> </p><p>32位CPU: 8B</p><p>64位CPU: 8B</p><h2 id="size-t-sizeof"><a href="#size-t-sizeof" class="headerlink" title="size_t&amp;sizeof"></a>size_t&amp;sizeof</h2><p>size_t:数据类型-&gt;uint64_t</p><p>sizeof:函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int32_t</span> number = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zd %zd\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int32_t</span>), <span class="keyword">sizeof</span>(number));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>%zd</code> ,<code>%zu</code> </p><h2 id="整型实际应用"><a href="#整型实际应用" class="headerlink" title="整型实际应用"></a>整型实际应用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="comment">// 引入int??_t的表达形式</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="comment">// 引入INT_MAX的表达形式</span></span><br></pre></td></tr></table></figure><h3 id="int8-int8-t-uint8-t"><a href="#int8-int8-t-uint8-t" class="headerlink" title="__int8 -&gt;int8_t&#x2F;uint8_t"></a>__int8 -&gt;int8_t&#x2F;uint8_t</h3><h3 id="int16-int16-t-uint16-t"><a href="#int16-int16-t-uint16-t" class="headerlink" title="__int16 -&gt;int16_t&#x2F;uint16_t"></a>__int16 -&gt;int16_t&#x2F;uint16_t</h3><h3 id="int32-int32-t-uint32-t"><a href="#int32-int32-t-uint32-t" class="headerlink" title="__int32 -&gt;int32_t&#x2F;uint32_t"></a>__int32 -&gt;int32_t&#x2F;uint32_t</h3><p>none, <code>U</code> </p><h3 id="int64-int64-t-uint64-t"><a href="#int64-int64-t-uint64-t" class="headerlink" title="__int64 -&gt;int64_t&#x2F;uint64_t"></a>__int64 -&gt;int64_t&#x2F;uint64_t</h3><p><code>LL</code> ,<code>ULL</code> </p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="隐式"><a href="#隐式" class="headerlink" title="隐式"></a>隐式</h3><p><code>unum = num</code> </p><ol><li>有符号-&gt;无符号</li><li>小范围-&gt;大范围</li></ol><h3 id="显式"><a href="#显式" class="headerlink" title="显式"></a>显式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="comment">// 引入INT32_MAX的表达形式</span></span><br><span class="line"><span class="type">uint32_t</span> unum = UINT32_MAX;</span><br><span class="line"><span class="type">int32_t</span> num = (<span class="type">int32_t</span>)unum;</span><br></pre></td></tr></table></figure><ol><li>无符号-&gt;有符号</li><li>大范围-&gt;小范围</li></ol><p><strong>报错</strong> </p><h2 id="printf实际应用"><a href="#printf实际应用" class="headerlink" title="printf实际应用"></a>printf实际应用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="comment">// 引入PRI???的表达形式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%&quot;</span> PRId32 <span class="string">&quot;\n&quot;</span>, num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, unum);</span><br></pre></td></tr></table></figure><h2 id="int-least32-t-int-fast32-t"><a href="#int-least32-t-int-fast32-t" class="headerlink" title="int_least32_t&amp;int_fast32_t"></a>int_least32_t&amp;int_fast32_t</h2><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><ol><li>记录正负浮点数：左右偏差</li><li>丢失精度</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="comment">// 引入???_MAX的表达形式</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> max_float = FLT_MAX;</span><br></pre></td></tr></table></figure><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>32b&#x3D;1+23+8</p><p>存储,速度</p><p>游戏渲染</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, DBL_DIG);</span><br><span class="line">-&gt;<span class="number">6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, FLT_DIG);</span><br><span class="line">-&gt;<span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>64b&#x3D;1+52+11</p><p>精度</p><h3 id="long-double"><a href="#long-double" class="headerlink" title="long double"></a>long double</h3><p><code>L</code> </p><h3 id="infinity-inf"><a href="#infinity-inf" class="headerlink" title="infinity&#x2F;inf"></a>infinity&#x2F;inf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="type">float</span> infinity = INFINITY;</span><br></pre></td></tr></table></figure><p>1.0 &#x2F; 0.0</p><h3 id="Not-a-Number-nan"><a href="#Not-a-Number-nan" class="headerlink" title="Not a Number&#x2F;nan"></a>Not a Number&#x2F;nan</h3><p>0.0 &#x2F; 0.0</p><h2 id="signed-char-unsigned-char"><a href="#signed-char-unsigned-char" class="headerlink" title="signed char&#x2F;unsigned char"></a>signed char&#x2F;unsigned char</h2><p>1B</p><p>ASCII</p><h2 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h2><p><code>printf(&quot;\033[2J&quot;);</code> 清屏</p><p><code>printf(&quot;\033[H\033[J&quot;);</code> 清屏</p><p><code>printf(&quot;\033[%d;%dH&quot;, 3, 3);</code> 更改光标位置</p><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">// 引入true和false的表达形式,否则只能用0和1</span></span><br></pre></td></tr></table></figure><p>1b</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ol><li><code>const int NUM = 1;</code> </li><li><code>#define num 1</code> 宏定义</li></ol><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>多重赋值:从右往左,不超过三层</p><h2 id="按位运算符"><a href="#按位运算符" class="headerlink" title="按位运算符"></a>按位运算符</h2><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p><code>&lt;&lt;</code> 低位补零&amp;<code>&gt;&gt;</code> 高位补零</p><ul><li>直接操作二进制,性能优化</li></ul><h3 id="与"><a href="#与" class="headerlink" title="与"></a>与</h3><p><code>&amp;</code> </p><ul><li>11-&gt;1</li></ul><h3 id="与或-或"><a href="#与或-或" class="headerlink" title="与或&#x2F;或"></a>与或&#x2F;或</h3><p><code>|</code> </p><ul><li>00-&gt;0</li></ul><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p><code>^</code> </p><ul><li>10-&gt;1</li><li>01-&gt;1</li></ul><ol><li><p>二进制数某一位取反</p></li><li><p>交换两数</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p><code>~</code> </p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id=""><a href="#" class="headerlink" title="&amp;&amp;"></a><code>&amp;&amp;</code></h3><h3 id="-1"><a href="#-1" class="headerlink" title="||"></a><code>||</code></h3><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p><code>,</code> </p><p><code>result = (a = 1, b = 2, c = 3);</code> 只会将最后的c赋值给result</p><h2 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h2><p>不便于优化:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="type">bool</span> is_a = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> is_b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(is_a &amp;&amp; is_b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_a != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>便于优化，逻辑不清晰:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> role = <span class="number">3</span>;</span><br><span class="line"><span class="type">uint8_t</span> completeTasks = <span class="number">60</span>;</span><br><span class="line"><span class="type">bool</span> manager_approved = <span class="literal">true</span>;</span><br><span class="line"><span class="type">bool</span> access = (role == <span class="number">1</span>) || (role == <span class="number">2</span> &amp;&amp; completeTasks &gt; <span class="number">30</span>) || (role == <span class="number">3</span> &amp;&amp; completeTasks &gt; <span class="number">50</span> &amp;&amp; manager_approved == <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (access)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch…case"><a href="#switch…case" class="headerlink" title="switch…case"></a>switch…case</h2><ul><li>switch(整型)</li></ul><p>状态机</p><p>便于优化,逻辑清晰:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkManager</span><span class="params">()</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkEmp</span><span class="params">(<span class="type">uint8_t</span> completeTasks)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkIntern</span><span class="params">(<span class="type">uint8_t</span> completeTasks, <span class="type">bool</span> managerApproved)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> role = <span class="number">3</span>;</span><br><span class="line"><span class="type">uint8_t</span> completeTasks = <span class="number">60</span>;</span><br><span class="line"><span class="type">bool</span> managerApproved = <span class="literal">true</span>;</span><br><span class="line"><span class="type">bool</span> access;</span><br><span class="line"><span class="keyword">switch</span> (role)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">access = checkManager();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">access = checkEmp(completeTasks);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">access = checkIntern(completeTasks, managerApproved);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">access = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (access)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkManager</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkEmp</span><span class="params">(<span class="type">uint8_t</span> completeTasks)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> completeTasks &gt; <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkIntern</span><span class="params">(<span class="type">uint8_t</span> completeTasks, <span class="type">bool</span> managerApproved)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> completeTasks &gt; <span class="number">50</span> &amp;&amp; managerApproved == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">switch…case</th><th align="center">if…else</th></tr></thead><tbody><tr><td align="center">整型值传递</td><td align="center">bool类型判断</td></tr></tbody></table><h2 id="运算符"><a href="#运算符" class="headerlink" title="? :运算符"></a>? :运算符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> grade;</span><br><span class="line"><span class="type">uint8_t</span> score = <span class="number">61</span>;</span><br><span class="line">grade = (score &gt; <span class="number">90</span>) ? <span class="string">&#x27;A&#x27;</span> :</span><br><span class="line">(score &gt; <span class="number">80</span>) ? <span class="string">&#x27;B&#x27;</span> :</span><br><span class="line">(score &gt; <span class="number">70</span>) ? <span class="string">&#x27;C&#x27;</span> :</span><br><span class="line"><span class="string">&#x27;D&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, grade);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="卫语句"><a href="#卫语句" class="headerlink" title="卫语句"></a>卫语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkCarRent</span><span class="params">(<span class="type">uint8_t</span> age, <span class="type">uint8_t</span> drivingYears)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="type">uint8_t</span> drivingYears = <span class="number">5</span>;</span><br><span class="line">checkCarRent(age, drivingYears);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">checkCarRent</span><span class="params">(<span class="type">uint8_t</span> age, <span class="type">uint8_t</span> drivingYears)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (drivingYears &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表驱动法"><a href="#表驱动法" class="headerlink" title="表驱动法"></a>表驱动法</h2><h3 id="成绩评定"><a href="#成绩评定" class="headerlink" title="成绩评定"></a>成绩评定</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">grade_credits</span><span class="params">(<span class="type">uint32_t</span> grade)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> grade;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Enter the grade: &quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu32, &amp;grade);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, grade_credits(grade));</span><br><span class="line">Sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[H\033[J&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">grade_credits</span><span class="params">(<span class="type">uint32_t</span> grade)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> grade_array[] = &#123; <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;P&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> (grade &gt;= <span class="number">0</span> &amp;&amp; grade &lt;= <span class="number">100</span>) ? grade_array[grade / <span class="number">10</span>] : <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> PRICE = <span class="number">5</span>;</span><br><span class="line"><span class="type">uint32_t</span> balance = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> coin;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;本机提供饮料售卖，价格为5元，本机只接受1元，2元，5元&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (balance &lt; PRICE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;请投币：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu32, &amp;coin);</span><br><span class="line"><span class="keyword">if</span> (coin == <span class="number">1</span> || coin == <span class="number">2</span> || coin == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">balance += coin;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;您已投币：%&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, balance);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;对不起，我们不接受%&quot;</span> PRIu32 <span class="string">&quot;的硬币，请重新投币：\n&quot;</span>, coin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (balance &gt; PRICE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请收好你的找零:%&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, balance - PRICE);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;谢谢惠顾！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;谢谢惠顾！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do…whlie"><a href="#do…whlie" class="headerlink" title="do…whlie"></a>do…whlie</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> secretNum;</span><br><span class="line"><span class="type">uint32_t</span> guessNum;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">secretNum = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;猜猜是几&quot;</span>);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;请输入你的猜测：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu32, &amp;guessNum);</span><br><span class="line"><span class="keyword">if</span> (guessNum &gt; secretNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;太大了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (guessNum &lt; secretNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;太小了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (guessNum != secretNum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你，答案就是：%&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, secretNum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="continue-break"><a href="#continue-break" class="headerlink" title="continue&#x2F;break"></a>continue&#x2F;break</h2><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;请输入想要的数字金字塔：&quot;</span>);</span><br><span class="line"><span class="type">uint32_t</span> num;</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu32, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> j = num - i; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%&quot;</span> PRIu32 <span class="string">&quot; &quot;</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%&quot;</span> PRIu32 <span class="string">&quot; &quot;</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> STEP = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;处理中：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">1</span>; i &lt;= STEP; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r[&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> j = <span class="number">1</span>; j &lt;= STEP - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已完成：%&quot;</span> PRIu32 <span class="string">&quot;%%&quot;</span>, i * <span class="number">100</span> / STEP);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">Sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\n已经下载完成！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>连续的内存空间</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> number1[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> index = <span class="number">0</span>; index &lt;= <span class="number">9</span>; index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, number1[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> number2[<span class="number">10</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> index = <span class="number">0</span>; index &lt;= <span class="number">9</span>; index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, number2[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意两种定义方式的区别</span></span><br></pre></td></tr></table></figure><ul><li>隐式确定数组大小的初始化:一个完全初始化的数组可以省略数组的长度</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="built_in">array</span>[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> text[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="type">uint32_t</span> arrayD[][<span class="number">3</span>] = &#123;</span><br><span class="line">        &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,</span><br><span class="line">        &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,</span><br><span class="line">        &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字母统计"><a href="#字母统计" class="headerlink" title="字母统计"></a>字母统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line">string = <span class="built_in">str</span>.lower()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(i + <span class="number">97</span>) == ch:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(i + <span class="number">97</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;:&quot;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LETTER 26</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> text[] = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">uint32_t</span> c[LETTER] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> index = <span class="number">0</span>; text[index] != <span class="string">&#x27;\0&#x27;</span>; index++)</span><br><span class="line"><span class="comment">// uint32_t index = 0;</span></span><br><span class="line"><span class="comment">// while (text[index++] != &#x27;\0&#x27;)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(text[index]))</span><br><span class="line">&#123;</span><br><span class="line">c[<span class="built_in">tolower</span>(text[index]) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint32_t</span> index = <span class="number">0</span>; index &lt; LETTER; index++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[index] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c: %&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, index + <span class="string">&#x27;a&#x27;</span>, c[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="下棋"><a href="#下棋" class="headerlink" title="下棋"></a>下棋</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*下棋*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOARD_SIZE 15</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> board[BOARD_SIZE][BOARD_SIZE];</span><br><span class="line"><span class="type">uint8_t</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, board[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu8 <span class="string">&quot;%&quot;</span> SCNu8, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (x &lt; BOARD_SIZE &amp;&amp; y &lt; BOARD_SIZE &amp;&amp; board[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">board[x][y] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;无效输入！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[H\033[J&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*五子棋*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOARD_SIZE 15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EMPTY_CELL <span class="string">&#x27;.&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PLAYER1 <span class="string">&#x27;O&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PLAYER2 <span class="string">&#x27;X&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏胜利判断</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">check_winner</span><span class="params">(<span class="type">char</span> board[BOARD_SIZE][BOARD_SIZE], <span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y, <span class="type">char</span> current_piece)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_board</span><span class="params">(<span class="type">char</span> board[BOARD_SIZE][BOARD_SIZE])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> board[BOARD_SIZE][BOARD_SIZE];</span><br><span class="line"><span class="type">uint8_t</span> x, y;</span><br><span class="line"><span class="type">char</span> current_player = PLAYER1;</span><br><span class="line"><span class="type">char</span> winner = EMPTY_CELL;</span><br><span class="line"><span class="comment">// 初始化棋盘</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line">board[i][j] = EMPTY_CELL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (winner == EMPTY_CELL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 初始棋盘展示</span></span><br><span class="line">print_board(board);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前玩家的棋子是：%c (0-%d): &quot;</span>, current_player, BOARD_SIZE - <span class="number">1</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%&quot;</span> SCNu8 <span class="string">&quot; %&quot;</span> SCNu8, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (x &lt; BOARD_SIZE &amp;&amp; y &lt; BOARD_SIZE &amp;&amp; board[x][y] == EMPTY_CELL)</span><br><span class="line">&#123;</span><br><span class="line">board[x][y] = current_player;</span><br><span class="line">winner = check_winner(board, x, y, current_player);</span><br><span class="line"><span class="comment">// 更换下棋玩家</span></span><br><span class="line">current_player = (current_player == PLAYER1) ? PLAYER2 : PLAYER1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[H\033[J&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\033[H\033[J&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;落子错误，请重新来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 游戏结果展示</span></span><br><span class="line">print_board(board);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c棋子赢了\n&quot;</span>, winner);</span><br><span class="line">Sleep(<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">check_winner</span><span class="params">(<span class="type">char</span> board[BOARD_SIZE][BOARD_SIZE], <span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y, <span class="type">char</span> current_piece)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 四个方向分别判断</span></span><br><span class="line"><span class="type">int</span> derections[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> dx = derections[i][<span class="number">0</span>];</span><br><span class="line"><span class="type">int</span> dy = derections[i][<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> tx = x + dx;</span><br><span class="line"><span class="type">int</span> ty = y + dy;</span><br><span class="line"><span class="keyword">while</span> (tx &gt;= <span class="number">0</span> &amp;&amp; tx &lt; BOARD_SIZE &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; BOARD_SIZE &amp;&amp; board[tx][ty] == current_piece)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">tx += dx;</span><br><span class="line">ty += dy;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 反方向判断</span></span><br><span class="line">tx = x - dx;</span><br><span class="line">ty = y - dy;</span><br><span class="line"><span class="keyword">while</span> (tx &gt;= <span class="number">0</span> &amp;&amp; tx &lt; BOARD_SIZE &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; BOARD_SIZE &amp;&amp; board[tx][ty] == current_piece)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">tx -= dx;</span><br><span class="line">ty -= dy;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 胜利判断</span></span><br><span class="line"><span class="keyword">if</span> (count &gt;= <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> current_piece;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> EMPTY_CELL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_board</span><span class="params">(<span class="type">char</span> board[BOARD_SIZE][BOARD_SIZE])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; BOARD_SIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint8_t</span> j = <span class="number">0</span>; j &lt; BOARD_SIZE; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, board[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="农场"><a href="#农场" class="headerlink" title="农场"></a>农场</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*农场*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EMPTY 0<span class="comment">// 无植物生长</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PLANTED 1<span class="comment">// 植物生长</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MATURED 2<span class="comment">// 植物成熟</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STONE 3<span class="comment">// 植物无法生长</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> S 500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示田地</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_farm</span><span class="params">(<span class="type">int</span> farm[][COL])</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录生长结果</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">count_condition</span><span class="params">(<span class="type">int</span> farm[][COL])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 初始化田地</span></span><br><span class="line"><span class="type">int</span> farm[ROW][COL];</span><br><span class="line">srand((<span class="type">uint32_t</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line">farm[i][j] = (rand() % <span class="number">3</span> == <span class="number">0</span>) ? EMPTY : PLANTED;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示初始田地</span></span><br><span class="line">print_farm(farm);</span><br><span class="line">Sleep(S);</span><br><span class="line"><span class="comment">// 经过五天的生长</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> time = <span class="number">0</span>; time &lt; <span class="number">5</span>; time++)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (farm[i][j] == PLANTED)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rand() % <span class="number">10</span> &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">farm[i][j] = MATURED;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">print_farm(farm);</span><br><span class="line">Sleep(S);</span><br><span class="line">&#125;</span><br><span class="line">count_condition(farm);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;生长期结束&quot;</span>);</span><br><span class="line">Sleep(<span class="number">5000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_farm</span><span class="params">(<span class="type">int</span> farm[][COL])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (farm[i][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> EMPTY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;. &quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PLANTED:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MATURED:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;# &quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STONE:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;@ &quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">count_condition</span><span class="params">(<span class="type">int</span> farm[][COL])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> empty = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> planted = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> matured = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> stone = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (farm[i][j] == EMPTY)</span><br><span class="line">&#123;</span><br><span class="line">empty += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (farm[i][j] == PLANTED)</span><br><span class="line">&#123;</span><br><span class="line">planted += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (farm[i][j] == MATURED)</span><br><span class="line">&#123;</span><br><span class="line">matured += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (farm[i][j] == STONE)</span><br><span class="line">&#123;</span><br><span class="line">stone += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;EMPTY:%.1f%%\n&quot;</span>, empty * <span class="number">100.0</span> / ROW / COL);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PLANTED:%.1f%%\n&quot;</span>, planted * <span class="number">100.0</span> / ROW / COL);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MATURED:%.1f%%\n&quot;</span>, matured * <span class="number">100.0</span> / ROW / COL);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;STONE:%.1f%%\n&quot;</span>, stone * <span class="number">100.0</span> / ROW / COL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="普通递归"><a href="#普通递归" class="headerlink" title="普通递归"></a>普通递归</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> n * function(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, function(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> acc)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> acc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> function(n - <span class="number">1</span>, n * acc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, function(n, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>默认初始化为0</p><p>指针默认初始化为<code>NULL</code> </p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h3><p>限制单一文件使用</p><h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><p>跨函数调用保持状态和计数</p><h3 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h3><p>跨文件使用</p><h3 id="register"><a href="#register" class="headerlink" title="register"></a>register</h3><p>寄存器声明</p><h2 id="块作用域-链接性"><a href="#块作用域-链接性" class="headerlink" title="块作用域&amp;链接性"></a>块作用域&amp;链接性</h2><p><code>&#123;&#125;</code> 内部定义的变量外部访问不了</p><p>可能会产生野指针</p><h2 id="函数注释"><a href="#函数注释" class="headerlink" title="函数注释"></a>函数注释</h2><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>内存当中存储数据的唯一一个位置</p><h3 id="数组的指针"><a href="#数组的指针" class="headerlink" title="数组的指针"></a>数组的指针</h3><ol><li>数组地址是连续的</li><li>只需要首地址就能找到整个数组</li><li>数组地址等价于首个元素地址 -&gt; <code>num</code> 等价于<code>&amp;num[0]</code></li></ol><p>通过加减法移动指针,直接加减字节(B),同样可以计算指针距离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> building[] = &#123; <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = &amp;building[<span class="number">2</span>];</span><br><span class="line">ptr += <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">void</span>*)ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>size_t s = sizeof(num) / sizeof(num[0])</code> 可以获得数组长度</p><h3 id="ptr"><a href="#ptr" class="headerlink" title="ptr"></a>ptr</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> building[<span class="number">5</span>] = &#123; <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = &amp;building[<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 找地址，地图性质</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">void</span>*)ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;building[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 找值，导航性质</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, building[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 通过指针修改值</span></span><br><span class="line"><span class="type">int</span>* ptr2 = ptr;</span><br><span class="line">*ptr2 = <span class="number">106</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">void</span>*)ptr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *ptr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><h3 id="二维数组的指针"><a href="#二维数组的指针" class="headerlink" title="二维数组的指针"></a>二维数组的指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> matrix[<span class="number">2</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span>(*ptr)[<span class="number">3</span>] = matrix;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ptr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个指针,指向一个包含三个int类型元素的一维数组</p><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> department1[] = &#123; <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span> &#125;;</span><br><span class="line"><span class="type">int</span> department2[] = &#123; <span class="number">201</span>, <span class="number">202</span> &#125;;</span><br><span class="line"><span class="type">int</span> department3[] = &#123; <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr[<span class="number">3</span>] = &#123; department1, department2, department3 &#125;;</span><br><span class="line"><span class="type">size_t</span> department_size[<span class="number">3</span>] = &#123; <span class="keyword">sizeof</span>(department1) / <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="keyword">sizeof</span>(department2) / <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="keyword">sizeof</span>(department3) / <span class="keyword">sizeof</span>(<span class="type">int</span>) &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; department_size[i]; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ptr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数中值传递-地址引用传递-返回地址的函数"><a href="#函数中值传递-地址引用传递-返回地址的函数" class="headerlink" title="函数中值传递&amp;地址引用传递&amp;返回地址的函数"></a>函数中值传递&amp;地址引用传递&amp;返回地址的函数</h3><ul><li>void类型函数在执行完之后,函数生命周期结束导致函数中形参失效,操作失效</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>* value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> my_value = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;start = %d\n&quot;</span>, my_value);</span><br><span class="line">add(&amp;my_value);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end = %d\n&quot;</span>, my_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>* value)</span></span><br><span class="line">&#123;</span><br><span class="line">*value += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="薪资管理系统"><a href="#薪资管理系统" class="headerlink" title="薪资管理系统"></a>薪资管理系统</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EMPLOYEES 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改功能实现一定要使用指针</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span>* salary, <span class="type">int</span> increment)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> salary[EMPLOYEES])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bonus</span><span class="params">(<span class="type">int</span> salary)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">highest</span><span class="params">(<span class="type">const</span> <span class="type">int</span> salary[EMPLOYEES])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> salary[EMPLOYEES] = &#123; <span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>, <span class="number">4000</span>, <span class="number">5000</span> &#125;;</span><br><span class="line"><span class="type">int</span> increment = <span class="number">5000</span>;</span><br><span class="line">print(salary);</span><br><span class="line">update(salary, increment);</span><br><span class="line">print(salary);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; EMPLOYEES; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, bonus(salary[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, highest(salary));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *highest(salary));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, bonus(*highest(salary)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span>* salary, <span class="type">int</span> increment)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; EMPLOYEES; i++)</span><br><span class="line">&#123;</span><br><span class="line">salary[i] += increment;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> salary[EMPLOYEES])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; EMPLOYEES; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, salary[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bonus</span><span class="params">(<span class="type">int</span> salary)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> salary * <span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">highest</span><span class="params">(<span class="type">const</span> <span class="type">int</span> salary[EMPLOYEES])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* highest = &amp;salary;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; EMPLOYEES; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (salary[i] &gt; *highest)</span><br><span class="line">&#123;</span><br><span class="line">highest = &amp;salary[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return (int*)highest;</span></span><br><span class="line"><span class="keyword">return</span> highest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串指针"><a href="#字符串指针" class="headerlink" title="字符串指针"></a>字符串指针</h3><h4 id="探索游戏"><a href="#探索游戏" class="headerlink" title="探索游戏"></a>探索游戏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXP_PRE_LEVEL 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LEVEL 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改功能实现一定要使用指针</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">increase_exp</span><span class="params">(<span class="type">int</span>* <span class="built_in">exp</span>, <span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">*<span class="built_in">exp</span> += value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* char ch1 = &#x27;f&#x27;;</span></span><br><span class="line"><span class="comment">* char ch2[] = &quot;fds&quot;;</span></span><br><span class="line"><span class="comment">* const char* ch3 = &quot;fds&quot;;</span></span><br><span class="line"><span class="comment">* char* ch4[] = &#123; &quot;fds&quot;, &quot;fds&quot;, &quot;fds&quot; &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义字符串指针，可以传递/返回一串字符串</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">get_treasure</span><span class="params">(<span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* treasures[] = &#123; <span class="string">&quot;木剑&quot;</span>, <span class="string">&quot;铁剑&quot;</span>, <span class="string">&quot;钻石剑&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (level &gt; <span class="number">1</span> &amp;&amp; level &lt;= <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> treasures[level - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;超级剑&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">exp</span> = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> level = <span class="number">1</span>;</span><br><span class="line">increase_exp(&amp;<span class="built_in">exp</span>, <span class="number">670</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">exp</span> &gt;= EXP_PRE_LEVEL &amp;&amp; level &lt; MAX_LEVEL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">exp</span> -= EXP_PRE_LEVEL;</span><br><span class="line">level += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;升级到了：%d\n&quot;</span>, level);</span><br><span class="line"><span class="keyword">if</span> (level != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, get_treasure(level));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;暂时升不了级\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加成就"><a href="#添加成就" class="headerlink" title="添加成就"></a>添加成就</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACHEIEVEMENTS 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可变的全局变量只能通过函数来修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* acheievement[ACHEIEVEMENTS];</span><br><span class="line"><span class="type">size_t</span> acheievement_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_acheievement</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* new_achievement)</span></span><br><span class="line">&#123;</span><br><span class="line">acheievement[acheievement_count++] = new_achievement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_acheievements</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; acheievement_count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%zu: %s\n&quot;</span>, i + <span class="number">1</span>, acheievement[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">add_acheievement(<span class="string">&quot;First blood&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Double kill&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Triple kill&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Quadra kill&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Penta kill&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Legendary&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Godlike&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Unstoppable&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Rampage&quot;</span>);</span><br><span class="line">add_acheievement(<span class="string">&quot;Immortal&quot;</span>);</span><br><span class="line"></span><br><span class="line">print_acheievements();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体structures"><a href="#结构体structures" class="headerlink" title="结构体structures"></a>结构体structures</h2><h3 id="定义和访问"><a href="#定义和访问" class="headerlink" title="定义和访问"></a>定义和访问</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// 成员</span></span><br><span class="line"><span class="type">int</span> year;</span><br><span class="line"><span class="type">int</span> month;</span><br><span class="line"><span class="type">int</span> day;</span><br><span class="line">&#125; Date;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 值的集合</span></span><br><span class="line">Date today = &#123; <span class="number">2024</span>, <span class="number">4</span>, <span class="number">25</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-%d-%d\n&quot;</span>, today.year, today.month, today.day);</span><br><span class="line">Date* p = &amp;today;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d-%d-%d\n&quot;</span>, p-&gt;year, p-&gt;month, p-&gt;day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数中结构体传递"><a href="#函数中结构体传递" class="headerlink" title="函数中结构体传递"></a>函数中结构体传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">float</span> score;</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_stu</span><span class="params">(Student s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(Student* s, <span class="type">float</span> new_score)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Student s = &#123; <span class="string">&quot;Jim&quot;</span>, <span class="number">1001</span>, <span class="number">98.5</span> &#125;;</span><br><span class="line">print_stu(s);</span><br><span class="line">update(&amp;s, <span class="number">99.5</span>);</span><br><span class="line">print_stu(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_stu</span><span class="params">(Student s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\t&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, s.score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(Student* s, <span class="type">float</span> new_score)</span></span><br><span class="line">&#123;</span><br><span class="line">s-&gt;score = new_score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回结构体的函数"><a href="#返回结构体的函数" class="headerlink" title="返回结构体的函数"></a>返回结构体的函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125; Point;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值语义</span></span><br><span class="line">Point <span class="title function_">get_point</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Point point1 = get_point();</span><br><span class="line">Point point2 = get_point();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point <span class="title function_">get_point</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Point p = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125; Point;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Point points[<span class="number">2</span>] = &#123;</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span> &#125;,</span><br><span class="line">&#123; <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Point %d: (%d, %d)\n&quot;</span>, i, points[i].x, points[i].y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体的嵌套"><a href="#结构体的嵌套" class="headerlink" title="结构体的嵌套"></a>结构体的嵌套</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> country[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> city[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> street[<span class="number">20</span>];</span><br><span class="line">&#125; Address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">Address address;</span><br><span class="line">&#125; Person;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Person person = &#123; <span class="string">&quot;John&quot;</span>, <span class="number">30</span>, &#123;<span class="string">&quot;USA&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Wall Street&quot;</span>&#125; &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name: %s\n&quot;</span>, person.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Age: %d\n&quot;</span>, person.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Address: %s, %s, %s\n&quot;</span>, person.address.country, person.address.city, person.address.street);</span><br><span class="line"></span><br><span class="line">Person* pPerson = &amp;person;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name: %s\n&quot;</span>, pPerson-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Age: %d\n&quot;</span>, pPerson-&gt;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Address: %s, %s, %s\n&quot;</span>, pPerson-&gt;address.country, pPerson-&gt;address.city, pPerson-&gt;address.street);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举enumeration"><a href="#枚举enumeration" class="headerlink" title="枚举enumeration"></a>枚举enumeration</h2><p>替代大量define使用，将字符串以整数输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">monday,</span><br><span class="line">tuesday,</span><br><span class="line">wednesday,</span><br><span class="line">thursday,</span><br><span class="line">friday,</span><br><span class="line">saturday,</span><br><span class="line">sunday</span><br><span class="line">&#125; days;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, monday);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="联合union"><a href="#联合union" class="headerlink" title="联合union"></a>联合union</h2><p>在同一存储位置存储不同类型的数据，同一时间只能存储一个值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">int</span> intValue;</span><br><span class="line"><span class="type">float</span> floatValue;</span><br><span class="line"><span class="type">char</span>* stringValue;</span><br><span class="line">&#125; Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">INT,</span><br><span class="line">FLOAT,</span><br><span class="line">STRING</span><br><span class="line">&#125; DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">DataType type;</span><br><span class="line">Data data;</span><br><span class="line">&#125; Which;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printType</span><span class="params">(Which* demo)</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (demo-&gt;type) &#123;</span><br><span class="line"><span class="keyword">case</span> INT:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Integer: %d\n&quot;</span>, demo-&gt;data.intValue);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Float: %f\n&quot;</span>, demo-&gt;data.floatValue);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;String: %s\n&quot;</span>, demo-&gt;data.stringValue);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Which demo1 = &#123; INT, &#123;.intValue = <span class="number">10</span> &#125; &#125;;</span><br><span class="line">Which demo2 = &#123; FLOAT, &#123;.floatValue = <span class="number">3.14</span> &#125; &#125;;</span><br><span class="line">Which demo3 = &#123; STRING, &#123;.stringValue = <span class="string">&quot;Hello, World!&quot;</span> &#125; &#125;;</span><br><span class="line">printType(&amp;demo1);</span><br><span class="line">printType(&amp;demo2);</span><br><span class="line">printType(&amp;demo3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多文件编程"><a href="#多文件编程" class="headerlink" title="多文件编程"></a>多文件编程</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*头文件:英雄种类&amp;敌人种类*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GAME_TYPES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GAME_TYPES_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">Warrior,</span><br><span class="line">Mage,</span><br><span class="line">Rogue</span><br><span class="line">&#125; CharacterClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">Goblin,</span><br><span class="line">Troll,</span><br><span class="line">Dragon</span><br><span class="line">&#125; EnemyType;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*头文件:英雄数值&amp;敌人数值*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GAME_ABILITIES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GAME_ABILITIES_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">int</span> strength;</span><br><span class="line"><span class="type">float</span> mana;</span><br><span class="line"><span class="type">int</span> stealth;</span><br><span class="line">&#125; Ability;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*头文件:英雄档案&amp;敌人档案*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GAMESTRUCTS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GAMESTRUCTS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gameTypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gameAbilities.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">CharacterClass type;</span><br><span class="line">Ability ability;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> level;</span><br><span class="line"><span class="type">int</span> experience;</span><br><span class="line">&#125; Player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">EnemyType type;</span><br><span class="line">Ability ability;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> level;</span><br><span class="line">&#125; Enemy;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*头文件:执行函数*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GAME_FUNCTIONS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GAME_FUNCTIONS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gameStructs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">create_player</span><span class="params">(Player* player, <span class="type">const</span> <span class="type">char</span>* name, CharacterClass type)</span>;</span><br><span class="line"></span><br><span class="line">Enemy <span class="title function_">generate_enemy</span><span class="params">(EnemyType type, <span class="type">int</span> level)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">battle</span><span class="params">(Player* player, Enemy* enemy)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player_info</span><span class="params">(<span class="type">const</span> Player* player)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_enemy_info</span><span class="params">(<span class="type">const</span> Enemy* enemy)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*源文件:执行函数*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gameFunctions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">create_player</span><span class="params">(Player* player, <span class="type">const</span> <span class="type">char</span>* name, CharacterClass class)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">errno_t</span> err;</span><br><span class="line">err = strcpy_s(player-&gt;name, <span class="keyword">sizeof</span>(player-&gt;name), name, _TRUNCATE);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Error copying name: %d\n&quot;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">player-&gt;type = class;</span><br><span class="line">player-&gt;level = <span class="number">1</span>;</span><br><span class="line">player-&gt;health = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">switch</span> (class)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Warrior:</span><br><span class="line">player-&gt;ability.strength = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Mage:</span><br><span class="line">player-&gt;ability.mana = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Rogue:</span><br><span class="line">player-&gt;ability.stealth = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Enemy <span class="title function_">generate_enemy</span><span class="params">(EnemyType type, <span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line">Enemy enemy;</span><br><span class="line">enemy.type = type;</span><br><span class="line">enemy.level = level;</span><br><span class="line">enemy.health = <span class="number">20</span> * level;</span><br><span class="line"><span class="keyword">switch</span> (type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Goblin:</span><br><span class="line">enemy.ability.strength = <span class="number">5</span> * level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Troll:</span><br><span class="line">enemy.ability.strength = <span class="number">10</span> * level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Dragon:</span><br><span class="line">enemy.ability.strength = <span class="number">20</span> * level;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> enemy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">battle</span><span class="params">(Player* player, Enemy* enemy)</span></span><br><span class="line">&#123;</span><br><span class="line">player-&gt;experience += <span class="number">50</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, player-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player_info</span><span class="params">(<span class="type">const</span> Player* player)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name: %s\n&quot;</span>, player-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Class: %d\n&quot;</span>, player-&gt;type);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Level: %d\n&quot;</span>, player-&gt;level);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Health: %d\n&quot;</span>, player-&gt;health);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_enemy_info</span><span class="params">(<span class="type">const</span> Enemy* enemy)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Type: %d\n&quot;</span>, enemy-&gt;type);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Level: %d\n&quot;</span>, enemy-&gt;level);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Health: %d\n&quot;</span>, enemy-&gt;health);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*源文件:主函数*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gameStructs.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gameFunctions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Welcome to game!&quot;</span>);</span><br><span class="line">Player player;</span><br><span class="line">create_player(&amp;player, <span class="string">&quot;Hero&quot;</span>, Warrior);</span><br><span class="line">print_player_info(&amp;player);</span><br><span class="line"><span class="comment">// game_loop();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>尽量用const,隐式定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> <span class="built_in">string</span>[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcpy-s"><a href="#strcpy-s" class="headerlink" title="strcpy_s"></a>strcpy_s</h3><ul><li>将一个字符串复制到另一个字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> str1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">50</span>];</span><br><span class="line">strcpy_s(str2, <span class="keyword">sizeof</span>(str2), str1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><ul><li>sizeof会计算’\0’,strlen只计算非空字符</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> str1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%zd&quot;</span>, <span class="built_in">strlen</span>(str1));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcat-s"><a href="#strcat-s" class="headerlink" title="strcat_s"></a>strcat_s</h3><ul><li>在一个字符串尾部添加另一个字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> str1[<span class="number">50</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> str2[] = <span class="string">&quot;, world\n&quot;</span>;</span><br><span class="line"><span class="type">rsize_t</span> len = <span class="keyword">sizeof</span>(str1) - <span class="built_in">strlen</span>(str2) - <span class="number">1</span>;</span><br><span class="line">strcat_s(str1, len, str2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sprintf-s"><a href="#sprintf-s" class="headerlink" title="sprintf_s"></a>sprintf_s</h3><ul><li>以字符串格式化输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> number = <span class="number">3</span>;</span><br><span class="line"><span class="type">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">int</span> ret = sprintf_s(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;The number is %d and the pi is %f&quot;</span>, number, pi);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;An error occurred\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The string is %s\n&quot;</span>, buffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strncpy-s"><a href="#strncpy-s" class="headerlink" title="strncpy_s"></a>strncpy_s</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> <span class="built_in">string</span>[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span>* ptr = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="number">10</span>;</span><br><span class="line">strncpy_s(<span class="built_in">string</span>, <span class="keyword">sizeof</span>(<span class="built_in">string</span>), ptr, len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strncat-s"><a href="#strncat-s" class="headerlink" title="strncat_s"></a>strncat_s</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> <span class="built_in">string</span>[<span class="number">20</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>* ptr = <span class="string">&quot;, World!\\n&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> result = strncat_s(<span class="built_in">string</span>, <span class="keyword">sizeof</span>(<span class="built_in">string</span>), ptr, len);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;success:%s\n&quot;</span>, <span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gets-s"><a href="#gets-s" class="headerlink" title="gets_s"></a>gets_s</h3><ul><li>输入获取字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">gets_s(buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strtok-s"><a href="#strtok-s" class="headerlink" title="strtok_s"></a>strtok_s</h3><ul><li>分割字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;this is an apple&quot;</span>;</span><br><span class="line"><span class="type">char</span> delim[] = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="type">char</span>* token;</span><br><span class="line"><span class="type">char</span>* context = <span class="string">&quot;&quot;</span>;</span><br><span class="line">token = strtok_s(str, delim, &amp;context);</span><br><span class="line"><span class="keyword">while</span> (token != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, token);</span><br><span class="line">token = strtok_s(<span class="literal">NULL</span>, delim, &amp;context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h3><ul><li>本质是两个字符串相减</li></ul><h3 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h3><h3 id="strchr"><a href="#strchr" class="headerlink" title="strchr"></a>strchr</h3><h3 id="strrchr"><a href="#strrchr" class="headerlink" title="strrchr"></a>strrchr</h3><ol><li>字符第一次出现的位置</li><li>字符最后一次出现的位置</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="type">char</span> to_find = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* found = <span class="built_in">strchr</span>(str, to_find);</span><br><span class="line"><span class="type">char</span>* refound = <span class="built_in">strrchr</span>(str, to_find);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;First occurrence of &#x27;%c&#x27; is at position %td\n&quot;</span>, to_find, found - str + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Last occurrence of &#x27;%c&#x27; is at position %td\n&quot;</span>, to_find, refound - str + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h3><ul><li>字符串出现的位置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* text = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* sub = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* result = <span class="built_in">strstr</span>(text, sub);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%td&quot;</span>, result - text + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strspn"><a href="#strspn" class="headerlink" title="strspn"></a>strspn</h3><ul><li>str1中第一个不出现在str2的下标</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str1 = <span class="string">&quot;abc123de&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str2 = <span class="string">&quot;abc123ef&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">strspn</span>(str1, str2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%zu&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strcspn"><a href="#strcspn" class="headerlink" title="strcspn"></a>strcspn</h3><ul><li>str1中第一个出现在str2的下标</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str1 = <span class="string">&quot;abcdef123456&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str2 = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">strcspn</span>(str1, str2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%zu&quot;</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特殊字符串寻找"><a href="#特殊字符串寻找" class="headerlink" title="特殊字符串寻找"></a>特殊字符串寻找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str1 = <span class="string">&quot;filename.txt&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str2 = <span class="string">&quot;?!~|/&lt;&gt;,&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> len = <span class="built_in">strcspn</span>(str1, str2);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="built_in">strlen</span>(str1))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No special characters found\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Special characters found\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串语句处理"><a href="#字符串语句处理" class="headerlink" title="字符串语句处理"></a>字符串语句处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEXT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORD_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELIM <span class="string">&quot; ,.!?&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">replaceWord</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> <span class="type">char</span>* oldWord, <span class="type">const</span> <span class="type">char</span>* newWord, <span class="type">char</span>* result)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">countChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">char</span> ch)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">countWords</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">extractUniqueWords</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">char</span> uniqueWords[][WORD_SIZE], <span class="type">int</span>* uniqueCount)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> text[] = <span class="string">&quot;This is a simple test.This test is for testing.&quot;</span>;</span><br><span class="line"><span class="type">char</span> result[TEXT_SIZE] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> oldWord[] = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="type">char</span> newWord[] = <span class="string">&quot;exam&quot;</span>;</span><br><span class="line"><span class="type">char</span> countCharTarget = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"><span class="type">char</span> uniqueWords[TEXT_SIZE][WORD_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> uniqueCount = <span class="number">0</span>;</span><br><span class="line">replaceWord(text, oldWord, newWord, result);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, result);</span><br><span class="line"><span class="type">int</span> charCount = countChar(result, countCharTarget);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, charCount);</span><br><span class="line"><span class="type">int</span> wordCount = countWords(result);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, wordCount);</span><br><span class="line">extractUniqueWords(result, uniqueWords, &amp;uniqueCount);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; uniqueCount; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, uniqueWords[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">replaceWord</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> <span class="type">char</span>* oldWord, <span class="type">const</span> <span class="type">char</span>* newWord, <span class="type">char</span>* result)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buffer[TEXT_SIZE] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span>* position = text;</span><br><span class="line"><span class="type">char</span>* temp = text;</span><br><span class="line"><span class="type">size_t</span> oldLen = <span class="built_in">strlen</span>(oldWord);</span><br><span class="line"><span class="comment">// 查找被替换词</span></span><br><span class="line"><span class="keyword">while</span> ((temp = <span class="built_in">strstr</span>(position, oldWord)) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 把无关内容复制到buffer</span></span><br><span class="line">strncat_s(buffer, <span class="keyword">sizeof</span>(buffer), position, temp - position);</span><br><span class="line"><span class="comment">// 把替换词复制到buffer</span></span><br><span class="line">strcat_s(buffer, <span class="keyword">sizeof</span>(buffer), newWord);</span><br><span class="line">position = temp + oldLen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把无关内容复制到buffer</span></span><br><span class="line">strcat_s(buffer, <span class="keyword">sizeof</span>(buffer), position);</span><br><span class="line"><span class="comment">// 把buffer复制到result</span></span><br><span class="line">strcpy_s(result, TEXT_SIZE, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">countChar</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">char</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*text<span class="comment">/* != &#x27;\0&#x27;*/</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*text == ch)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">text++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">countWords</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buffer[TEXT_SIZE] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">strcpy_s(buffer, <span class="keyword">sizeof</span>(buffer), text);</span><br><span class="line"><span class="type">char</span>* context = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span>* token = strtok_s(buffer, DELIM, &amp;context);</span><br><span class="line"><span class="keyword">while</span> (token != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">token = strtok_s(<span class="literal">NULL</span>, DELIM, &amp;context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">extractUniqueWords</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">char</span> uniqueWords[][WORD_SIZE], <span class="type">int</span>* uniqueCount)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buffer[TEXT_SIZE] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">strcpy_s(buffer, <span class="keyword">sizeof</span>(buffer), text);</span><br><span class="line"><span class="type">char</span>* context = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span>* token = strtok_s(buffer, DELIM, &amp;context);</span><br><span class="line"><span class="keyword">while</span> (token != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 重复单词不计入</span></span><br><span class="line"><span class="type">int</span> found = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *uniqueCount; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(uniqueWords[i], token) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">found = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!found)</span><br><span class="line">&#123;</span><br><span class="line">strcpy_s(uniqueWords[*uniqueCount], WORD_SIZE, token);</span><br><span class="line">(*uniqueCount)++;</span><br><span class="line">&#125;</span><br><span class="line">token = strtok_s(<span class="literal">NULL</span>, DELIM, &amp;context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scanf-S"><a href="#scanf-S" class="headerlink" title="scanf_S"></a>scanf_S</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="comment">// scanf_s(&quot;%s&quot;, name, (unsigned int)sizeof(name));</span></span><br><span class="line"><span class="comment">// printf(&quot;Hello, %s!\n&quot;, name);</span></span><br><span class="line"><span class="comment">// scanf_s(&quot;%c&quot;, &amp;ch, 1);</span></span><br><span class="line"><span class="comment">// printf(&quot;%c&quot;, ch);</span></span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">result = scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (result == EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ^Z</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;EOF&quot;</span>);</span><br><span class="line">        <span class="comment">// 函数非正常终止</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入整数！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><ul><li>读：文件-&gt;缓冲区&#x2F;电脑</li><li>写：缓冲区&#x2F;电脑-&gt;文件</li></ul><table><thead><tr><th align="center">“r”</th><th align="center">“w”</th><th align="center">“a”</th><th align="center">“r+”</th><th align="center">“w+”</th><th align="center">“a+”</th></tr></thead><tbody><tr><td align="center">读取</td><td align="center">写入</td><td align="center">追加</td><td align="center">读取，写入</td><td align="center">读取，写入</td><td align="center">读取，追加</td></tr></tbody></table><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><ol><li>文件按行读</li><li>文件逐个读</li></ol><h4 id="fgets-fgetc"><a href="#fgets-fgetc" class="headerlink" title="fgets&amp;fgetc"></a>fgets&amp;fgetc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file_stream = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file_stream, <span class="string">&quot;D:\\learning\\C\\code\\demo.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file_stream == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), file_stream) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">rewind(file_stream);</span><br><span class="line"><span class="type">int</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = fgetc(file_stream)) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fclose(file_stream) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fscanf-s"><a href="#fscanf-s" class="headerlink" title="fscanf_s"></a>fscanf_s</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file_stream = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">81</span>];</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">float</span> f;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file_stream, <span class="string">&quot;D:\\learning\\C\\code\\demo.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The file was not opened\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fscanf_s(file_stream, <span class="string">&quot;%80s&quot;</span>, s, (<span class="type">unsigned</span>)_countof(s)) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fscanf_s(file_stream, <span class="string">&quot;%d&quot;</span>, &amp;i) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fscanf_s(file_stream, <span class="string">&quot;%f&quot;</span>, &amp;f) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fscanf_s(file_stream, <span class="string">&quot; %c&quot;</span>, &amp;c, <span class="number">1</span>) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s = %s\n&quot;</span>, s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f = %f\n&quot;</span>, f);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %c\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (file_stream == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">fclose(file_stream);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><h4 id="fputs-fputc-fprintf-s"><a href="#fputs-fputc-fprintf-s" class="headerlink" title="fputs&amp;fputc&amp;fprintf_s"></a>fputs&amp;fputc&amp;fprintf_s</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file_stream = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file_stream, <span class="string">&quot;D:\\learning\\C\\code\\demo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file_stream == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">fputc(<span class="string">&#x27;a&#x27;</span>, file_stream);</span><br><span class="line">fputc(<span class="string">&#x27;b&#x27;</span>, file_stream);</span><br><span class="line">fputc(<span class="string">&#x27;c&#x27;</span>, file_stream);</span><br><span class="line">fputc(<span class="string">&#x27;\n&#x27;</span>, file_stream);</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;a line\n&quot;</span>, file_stream);</span><br><span class="line">fprintf_s(file_stream, <span class="string">&quot;%s %d&quot;</span>, <span class="string">&quot;fdsa&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (fclose(file_stream) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移"><a href="#移" class="headerlink" title="移"></a>移</h3><h4 id="fseek-rewind"><a href="#fseek-rewind" class="headerlink" title="fseek&amp;rewind"></a>fseek&amp;rewind</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file_stream = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file_stream, <span class="string">&quot;D:\\learning\\C\\code\\demo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file_stream == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前文件指针位置</span></span><br><span class="line"><span class="type">long</span> position = ftell(file_stream);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前位置：%ld\n&quot;</span>, position);</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">if</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), file_stream) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取了：%s&quot;</span>, buffer);</span><br><span class="line">position = ftell(file_stream);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新位置：%ld\n&quot;</span>, position);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移动到某一位置</span></span><br><span class="line"><span class="comment">// SEEK_SET：文件开头</span></span><br><span class="line"><span class="comment">// SEEK_CUR：当前位置</span></span><br><span class="line"><span class="comment">// SEEK_END：文件结尾</span></span><br><span class="line">fseek(file_stream, <span class="number">5</span>, SEEK_SET);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fseek：%ld\n&quot;</span>, ftell(file_stream));</span><br><span class="line"><span class="comment">// 移动到文件开头</span></span><br><span class="line">rewind(file_stream);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;rewind：%ld\n&quot;</span>, ftell(file_stream));</span><br><span class="line"><span class="keyword">if</span> (fclose(file_stream) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判错-EOF"><a href="#判错-EOF" class="headerlink" title="判错&#x2F;EOF"></a>判错&#x2F;EOF</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file_stream = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file_stream, <span class="string">&quot;D:\\learning\\C\\code\\demo.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file_stream == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), file_stream) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buffer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ferror(file_stream))</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">clearerr(file_stream);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (feof(file_stream))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;End of file\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Not end of file\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fclose(file_stream) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件应用案例"><a href="#文件应用案例" class="headerlink" title="文件应用案例"></a>文件应用案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 256</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_config_safe</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file, filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">// 如果打开文件失败 || 指针空</span></span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将错误反馈存在字符串中，向屏幕输出</span></span><br><span class="line"><span class="type">char</span> error_message[<span class="number">256</span>];</span><br><span class="line">strerror_s(error_message, <span class="keyword">sizeof</span>(error_message), err);</span><br><span class="line">fprintf_s(<span class="built_in">stderr</span>, <span class="string">&quot;Error:%s\n&quot;</span>, error_message);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">while</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), file) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">append_log_safe</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* msg)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file, filename, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> error_message[<span class="number">256</span>];</span><br><span class="line">strerror_s(error_message, <span class="keyword">sizeof</span>(error_message), err);</span><br><span class="line">fprintf_s(<span class="built_in">stderr</span>, <span class="string">&quot;Error:%s\n&quot;</span>, error_message);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(file, <span class="string">&quot;%s\n&quot;</span>, msg);</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear_log</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file, filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> error_message[<span class="number">256</span>];</span><br><span class="line">strerror_s(error_message, <span class="keyword">sizeof</span>(error_message), err);</span><br><span class="line">fprintf_s(<span class="built_in">stderr</span>, <span class="string">&quot;Error:%s\n&quot;</span>, error_message);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">errno_t</span> <span class="title function_">update_log_record_s</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* search_str, <span class="type">const</span> <span class="type">char</span>* replace_str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查传入数据存在性</span></span><br><span class="line"><span class="keyword">if</span> (filename == <span class="literal">NULL</span> || search_str == <span class="literal">NULL</span> || replace_str == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EINVAL;</span><br><span class="line">&#125;</span><br><span class="line">FILE* file_ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file_ptr, filename, <span class="string">&quot;r+&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file_ptr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> error_message[<span class="number">256</span>];</span><br><span class="line">strerror_s(error_message, <span class="keyword">sizeof</span>(error_message), err);</span><br><span class="line">fprintf_s(<span class="built_in">stderr</span>, <span class="string">&quot;Error:%s\n&quot;</span>, error_message);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> buffer[BUFFER_SIZE];</span><br><span class="line"><span class="type">long</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> found = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 逐行读字符串到buffer中</span></span><br><span class="line"><span class="keyword">while</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), file_ptr) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 字符串出现位置，找到后就退出寻找</span></span><br><span class="line"><span class="type">char</span>* p = <span class="built_in">strstr</span>(buffer, search_str);</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">found = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// fgets会读取换行符</span></span><br><span class="line">position = ftell(file_ptr) - (<span class="type">long</span>)<span class="built_in">strlen</span>(buffer) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到了</span></span><br><span class="line"><span class="keyword">if</span> (found)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 移动指针到被替换字符串位置</span></span><br><span class="line">fseek(file_ptr, position, SEEK_SET);</span><br><span class="line"><span class="type">size_t</span> replace_len = <span class="built_in">strlen</span>(replace_str);</span><br><span class="line"><span class="type">size_t</span> search_len = <span class="built_in">strlen</span>(search_str);</span><br><span class="line"><span class="comment">// buffer防爆检测</span></span><br><span class="line"><span class="keyword">if</span> (replace_len &gt; BUFFER_SIZE - <span class="number">1</span> || search_len &gt; BUFFER_SIZE - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fclose(file_ptr);</span><br><span class="line"><span class="keyword">return</span> ERANGE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将buffer置为空格字符串</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="string">&#x27; &#x27;</span>, <span class="built_in">strlen</span>(buffer) - <span class="number">1</span>);</span><br><span class="line">buffer[<span class="built_in">strlen</span>(buffer) - <span class="number">1</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 用buffer替换原字符串，防止数据形式发生变化</span></span><br><span class="line">fseek(file_ptr, position, SEEK_SET);</span><br><span class="line"><span class="built_in">fputs</span>(buffer, file_ptr);</span><br><span class="line"><span class="comment">// 写入新字符串</span></span><br><span class="line">fseek(file_ptr, position, SEEK_SET);</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">fputs</span>(replace_str, file_ptr);</span><br><span class="line"><span class="keyword">if</span> (result == EOF)</span><br><span class="line">&#123;</span><br><span class="line">fclose(file_ptr);</span><br><span class="line"><span class="keyword">return</span> errno;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 未找到</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fclose(file_ptr);</span><br><span class="line"><span class="keyword">return</span> ENOENT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;D:\\learning\\C\\code\\demo.txt&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* log_filename = <span class="string">&quot;D:\\learning\\C\\code\\demo.txt&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* log_file = <span class="string">&quot;D:\\learning\\C\\code\\demo.log&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* search_str = <span class="string">&quot;shit&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* replace_str = <span class="string">&quot;fuck&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;fuck&quot;</span>;</span><br><span class="line"><span class="comment">// read_config_safe(filename);</span></span><br><span class="line"><span class="comment">// append_log_safe(log_filename, str);</span></span><br><span class="line"><span class="comment">// clear_log(log_filename);</span></span><br><span class="line"><span class="type">errno_t</span> result = update_log_record_s(log_file, search_str, replace_str);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> errno_msg[<span class="number">256</span>];</span><br><span class="line">strerror_s(errno_msg, <span class="keyword">sizeof</span>(errno_msg), result);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;an error occurred:%s\n&quot;</span>, errno_msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;successfully!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int numclosed = _fcloseall();</span></span><br><span class="line"><span class="comment">// printf(&quot;\nNumber of files closed by _fcloseall: %d\n&quot;, numclosed);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制文件应用案例"><a href="#二进制文件应用案例" class="headerlink" title="二进制文件应用案例"></a>二进制文件应用案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">float</span> volume;</span><br><span class="line"><span class="type">int</span> resolution_x;</span><br><span class="line"><span class="type">int</span> resolution_y;</span><br><span class="line"><span class="type">int</span> difficulty;</span><br><span class="line">&#125; GameSettings;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">save_game_settings</span><span class="params">(<span class="type">const</span> GameSettings* settings, <span class="type">const</span> <span class="type">char</span>* filename)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file, filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Error opening file\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fwrite(settings, <span class="keyword">sizeof</span>(GameSettings), <span class="number">1</span>, file);</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">load_game_settings</span><span class="params">(GameSettings* settings, <span class="type">const</span> <span class="type">char</span>* filename)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* file;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;file, filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Error opening file\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">fread(settings, <span class="keyword">sizeof</span>(GameSettings), <span class="number">1</span>, file);</span><br><span class="line">fclose(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// GameSettings settings = &#123; 0.5f, 1920, 1080, 2 &#125;;</span></span><br><span class="line"><span class="comment">// save_game_settings(&amp;settings, &quot;D:\\learning\\C\\code\\settings.bin&quot;);</span></span><br><span class="line">GameSettings settings;</span><br><span class="line">load_game_settings(&amp;settings, <span class="string">&quot;D:\\learning\\C\\code\\settings.bin&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Volume: %f\nResolution: %dx%d\nDifficulty: %d\n&quot;</span>, settings.volume, settings.resolution_x, settings.resolution_y, settings.difficulty);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* source_file, * target_file;</span><br><span class="line"><span class="type">char</span> source_path[] = <span class="string">&quot;D:\\learning\\C\\code\\1.txt&quot;</span>;</span><br><span class="line"><span class="type">char</span> target_path[] = <span class="string">&quot;D:\\learning\\C\\code\\2.txt&quot;</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line"><span class="type">size_t</span> bytes_read;</span><br><span class="line"><span class="type">errno_t</span> err = fopen_s(&amp;source_file, source_path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || source_file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">err = fopen_s(&amp;target_file, target_path, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span> || target_file == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line">fclose(source_file);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((bytes_read = fread(buffer, <span class="number">1</span>, <span class="keyword">sizeof</span>(buffer), source_file)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">fwrite(buffer, <span class="number">1</span>, bytes_read, target_file);</span><br><span class="line">&#125;</span><br><span class="line">_fcloseall();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><h3 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt"></a>sqrt</h3><h3 id="fabs"><a href="#fabs" class="headerlink" title="fabs"></a>fabs</h3><h3 id="ceil"><a href="#ceil" class="headerlink" title="ceil"></a>ceil</h3><p>向上取整</p><h3 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h3><p>向下取整</p><h3 id="fmod"><a href="#fmod" class="headerlink" title="fmod"></a>fmod</h3><p><code>num1 / num2</code> 的余数</p><h3 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h3><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _USE_MATH_DEFINES</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> number = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line">errno = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter a number: &quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%lf&quot;</span>, &amp;number);</span><br><span class="line"><span class="keyword">if</span> (errno == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">result = <span class="built_in">sqrt</span>(number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fmax-fmin"><a href="#fmax-fmin" class="headerlink" title="fmax&#x2F;fmin"></a>fmax&#x2F;fmin</h3><p>浮点数大小比较</p><h3 id="fdim"><a href="#fdim" class="headerlink" title="fdim"></a>fdim</h3><p>浮点数正差值</p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> t = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">local_time</span>;</span></span><br><span class="line">localtime_s(&amp;local_time, &amp;t);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">utc_time</span>;</span></span><br><span class="line">gmtime_s(&amp;utc_time, &amp;t);</span><br><span class="line"><span class="type">char</span> local_time_str[<span class="number">80</span>];</span><br><span class="line"><span class="type">char</span> utc_time_str[<span class="number">80</span>];</span><br><span class="line">strftime(local_time_str, <span class="number">80</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, &amp;local_time);</span><br><span class="line">strftime(utc_time_str, <span class="number">80</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, &amp;utc_time);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%&quot;</span> PRIdMAX <span class="string">&quot;\n&quot;</span>, (<span class="type">intmax_t</span>)t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Local time: %s\n&quot;</span>, local_time_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;UTC time: %s\n&quot;</span>, utc_time_str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><h3 id="栈内存stack-memory"><a href="#栈内存stack-memory" class="headerlink" title="栈内存stack memory"></a>栈内存stack memory</h3><h3 id="堆内存heap-memory"><a href="#堆内存heap-memory" class="headerlink" title="堆内存heap memory"></a>堆内存heap memory</h3><h4 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> staticArray[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>* dynamicArray = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span> (dynamicArray == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">dynamicArray[i] = (i + <span class="number">1</span>) * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;dynamicArray[%d] = %d\n&quot;</span>, i, dynamicArray[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(dynamicArray);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBudgets</span><span class="params">(<span class="type">double</span>* budgets, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Budget %d: %.2f\n&quot;</span>, i + <span class="number">1</span>, budgets[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> size = <span class="number">3</span>;</span><br><span class="line"><span class="type">double</span>* budgets = (<span class="type">double</span>*)<span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"><span class="keyword">if</span> (budgets == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;failed\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">budgets[<span class="number">0</span>] = <span class="number">1000.0</span>;</span><br><span class="line">budgets[<span class="number">1</span>] = <span class="number">2000.0</span>;</span><br><span class="line">budgets[<span class="number">2</span>] = <span class="number">3000.0</span>;</span><br><span class="line">printBudgets(budgets, size);</span><br><span class="line"><span class="type">int</span> newSize = <span class="number">5</span>;</span><br><span class="line"><span class="type">double</span>* newBudgets = (<span class="type">double</span>*)<span class="built_in">realloc</span>(budgets, newSize * <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"><span class="keyword">if</span> (newBudgets == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(budgets);</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">budgets = newBudgets;</span><br><span class="line">budgets[<span class="number">3</span>] = <span class="number">4000.0</span>;</span><br><span class="line">budgets[<span class="number">4</span>] = <span class="number">5000.0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">printBudgets(budgets, newSize);</span><br><span class="line"><span class="built_in">free</span>(budgets);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="防止内存泄漏"><a href="#防止内存泄漏" class="headerlink" title="防止内存泄漏"></a>防止内存泄漏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line"><span class="type">int</span> level;</span><br><span class="line"><span class="type">int</span> hp;</span><br><span class="line">&#125; Character;</span><br><span class="line"></span><br><span class="line">Character* <span class="title function_">createCharacter</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> level, <span class="type">int</span> hp)</span></span><br><span class="line">&#123;</span><br><span class="line">Character* new = (Character*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Character));</span><br><span class="line"><span class="keyword">if</span> (new == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;failed\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">new-&gt;name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(name) + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 防止内存泄漏</span></span><br><span class="line"><span class="keyword">if</span> (new-&gt;name == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;failed\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(new);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意字符串拷贝要用strcpy_s</span></span><br><span class="line">strcpy_s(new-&gt;name, <span class="built_in">strlen</span>(name) + <span class="number">1</span>, name);</span><br><span class="line">new-&gt;level = level;</span><br><span class="line">new-&gt;hp = hp;</span><br><span class="line"><span class="keyword">return</span> new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeCharacter</span><span class="params">(Character* character)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (character != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(character-&gt;name);</span><br><span class="line"><span class="built_in">free</span>(character);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Character* hero = createCharacter(<span class="string">&quot;Hero&quot;</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (hero == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">freeCharacter(hero);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line"><span class="type">int</span>* taskList;</span><br><span class="line"><span class="type">int</span> taskCount;</span><br><span class="line">&#125; Employee;</span><br><span class="line"></span><br><span class="line">Employee* <span class="title function_">createEmployee</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> taskCount)</span></span><br><span class="line">&#123;</span><br><span class="line">Employee* new_employee = (Employee*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Employee));</span><br><span class="line"><span class="keyword">if</span> (new_employee == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">new_employee-&gt;name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(name) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (new_employee-&gt;name == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(new_employee);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">strcpy_s(new_employee-&gt;name, <span class="built_in">strlen</span>(name) + <span class="number">1</span>, name);</span><br><span class="line">new_employee-&gt;taskCount = taskCount;</span><br><span class="line">new_employee-&gt;taskList = (<span class="type">int</span>*)<span class="built_in">calloc</span>(taskCount, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span> (new_employee-&gt;taskList == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(new_employee-&gt;name);</span><br><span class="line"><span class="built_in">free</span>(new_employee);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> new_employee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeCharacter</span><span class="params">(Employee* employee)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (employee != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(employee-&gt;name);</span><br><span class="line"><span class="built_in">free</span>(employee-&gt;taskList);</span><br><span class="line"><span class="built_in">free</span>(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Employee* developer = createEmployee(<span class="string">&quot;sfy&quot;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (developer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">developer-&gt;taskList[<span class="number">0</span>] = <span class="number">101</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Developer %s has task %d\n&quot;</span>, developer-&gt;name, developer-&gt;taskList[<span class="number">0</span>]);</span><br><span class="line">freeCharacter(developer);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">float</span> score;</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update</span><span class="params">(Student** student, <span class="type">int</span> id, <span class="type">float</span> score)</span> &#123;</span><br><span class="line">(*student)-&gt;id = id;</span><br><span class="line">(*student)-&gt;score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(Student* student)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID: %d\n&quot;</span>, student-&gt;id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Score: %.2f\n&quot;</span>, student-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Student sfy = &#123; <span class="number">739</span>, <span class="number">100.0</span> &#125;;</span><br><span class="line">Student* ptr = &amp;sfy;</span><br><span class="line">Student** pptr = &amp;ptr;</span><br><span class="line">print(ptr);</span><br><span class="line">update(pptr, <span class="number">799</span>, <span class="number">99.0</span>);</span><br><span class="line">print(ptr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多级指针操作动态结构体数组"><a href="#多级指针操作动态结构体数组" class="headerlink" title="多级指针操作动态结构体数组"></a>多级指针操作动态结构体数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIME_STRING_SIZE 26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">30</span>];</span><br><span class="line">&#125; Player;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印时间和两条相关信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">logMessage</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* level, <span class="type">const</span> <span class="type">char</span>* message)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="type">char</span> timeString[TIME_STRING_SIZE];</span><br><span class="line"><span class="keyword">if</span> (ctime_s(timeString, <span class="keyword">sizeof</span>(timeString), &amp;now) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">timeString[<span class="number">24</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;[%s] %s: %s\n&quot;</span>, timeString, level, message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;[error]\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相关信息性质</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">logError</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span><br><span class="line">&#123;</span><br><span class="line">logMessage(<span class="string">&quot;error&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">logInfo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span></span><br><span class="line">&#123;</span><br><span class="line">logMessage(<span class="string">&quot;info&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要更改的变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">updatePlayerList</span><span class="params">(Player** players, <span class="type">int</span>* currentSize, <span class="type">int</span> newSize, Player newPlayer)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (newSize &lt; *currentSize)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;newSize &lt; currentSize&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (newSize == *currentSize)</span><br><span class="line">&#123;</span><br><span class="line">logInfo(<span class="string">&quot;no needed&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次</span></span><br><span class="line">Player* temp = (Player*)<span class="built_in">realloc</span>(*players, newSize * <span class="keyword">sizeof</span>(Player));</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">logError(<span class="string">&quot;realloc failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*players = temp;</span><br><span class="line"><span class="keyword">if</span> (newSize &gt; *currentSize)</span><br><span class="line">&#123;</span><br><span class="line">(*players)[*currentSize] = newPlayer;</span><br><span class="line">&#125;</span><br><span class="line">*currentSize = newSize;</span><br><span class="line">        <span class="comment">// 每个数据产生两条播报</span></span><br><span class="line">logInfo(<span class="string">&quot;update success&quot;</span>);</span><br><span class="line"><span class="type">char</span> infoMessage[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">snprintf</span>(infoMessage, <span class="keyword">sizeof</span>(infoMessage), <span class="string">&quot;currentSize: %d&quot;</span>, *currentSize);</span><br><span class="line">logInfo(infoMessage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printPlayerList</span><span class="params">(Player* players, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Player %d: %s\n&quot;</span>, players[i].id, players[i].name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 第一次</span></span><br><span class="line">    <span class="comment">// 使用动态内存分配的数组</span></span><br><span class="line">Player* players = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> currentSize = <span class="number">0</span>;</span><br><span class="line">Player newPlayer1 = &#123; <span class="number">1</span>, <span class="string">&quot;sfy&quot;</span> &#125;;</span><br><span class="line">updatePlayerList(&amp;players, &amp;currentSize, currentSize + <span class="number">1</span>, newPlayer1);</span><br><span class="line">Player newPlayer2 = &#123; <span class="number">2</span>, <span class="string">&quot;pxy&quot;</span> &#125;;</span><br><span class="line">updatePlayerList(&amp;players, &amp;currentSize, currentSize + <span class="number">1</span>, newPlayer2);</span><br><span class="line">Player newPlayer3 = &#123; <span class="number">3</span>, <span class="string">&quot;zcy&quot;</span> &#125;;</span><br><span class="line">updatePlayerList(&amp;players, &amp;currentSize, currentSize + <span class="number">1</span>, newPlayer3);</span><br><span class="line">printPlayerList(players, currentSize);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三级指针字符串无限追加"><a href="#三级指针字符串无限追加" class="headerlink" title="三级指针字符串无限追加"></a>三级指针字符串无限追加</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/blog/2024/4/1/python/"/>
      <url>/blog/2024/4/1/python/</url>
      
        <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><blockquote><p>教育的目的不是诺奖，体育的目的不是金牌</p></blockquote><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>格式化数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;abc&quot;</span>, <span class="number">123</span>, <span class="number">456</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125;&#123;b&#125;&#123;c&#125;&quot;</span>.<span class="built_in">format</span>(a = <span class="string">&quot;abc&quot;</span>, b = <span class="number">123</span>, c = <span class="number">456</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">96.1234</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>字母</strong>，数字，<strong>下划线</strong></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><p>变量在左</p><h4 id="级联赋值"><a href="#级联赋值" class="headerlink" title="级联赋值"></a>级联赋值</h4><p><code>x = y = z = 1</code></p><h4 id="平行赋值"><a href="#平行赋值" class="headerlink" title="平行赋值"></a>平行赋值</h4><p><code>x, y, z = 1, 2, 3</code>–&gt;可以交换变量</p><h4 id="多行赋"><a href="#多行赋" class="headerlink" title="多行赋"></a>多行赋</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x     = <span class="number">1</span></span><br><span class="line">abc   = <span class="number">2</span></span><br><span class="line">apple = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>对齐</p><h3 id="数值类型和运算符"><a href="#数值类型和运算符" class="headerlink" title="数值类型和运算符"></a>数值类型和运算符</h3><p>任意大小的整数，一定范围的浮点数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;value = <span class="number">1.6</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">int</span>(value)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">round</span>(value)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">int</span>(<span class="string">&quot;34&quot;</span>)</span><br><span class="line"><span class="number">34</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">int</span>(<span class="string">&quot;003&quot;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">int</span>(<span class="string">&quot;3.4&quot;</span>)</span><br><span class="line">wrong</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">int</span>(<span class="string">&quot;3+4&quot;</span>)</span><br><span class="line">wrong</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">float</span>(<span class="string">&quot;34&quot;</span>)</span><br><span class="line"><span class="number">34.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">float</span>(<span class="string">&quot;003&quot;</span>)</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">float</span>(<span class="string">&quot;3+4&quot;</span>)</span><br><span class="line">wrong</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">eval</span>(<span class="string">&quot;34&quot;</span>)</span><br><span class="line"><span class="number">34</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">eval</span>(<span class="string">&quot;3.4&quot;</span>)</span><br><span class="line"><span class="number">3.4</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">eval</span>(<span class="string">&quot;003&quot;</span>)</span><br><span class="line">wrong</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">eval</span>(<span class="string">&quot;3+4&quot;</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="格式化数字"><a href="#格式化数字" class="headerlink" title="格式化数字"></a>格式化数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % (<span class="number">3.1415926</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">format</span>(<span class="number">3.1415926</span>, <span class="string">&quot;&lt;10.2e&quot;</span>)+<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment">#  左对齐,占用10个字符,保留两位小数,使用科学计数法</span></span><br><span class="line"><span class="number">3.14e+00</span>  a</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">format</span>(<span class="number">0.739799</span>, <span class="string">&quot;10.2%&quot;</span>))</span><br><span class="line">    <span class="number">73.98</span>%</span><br></pre></td></tr></table></figure><p>二进制:b</p><p>八进制:o</p><p>十进制:d</p><p>十六进制:x</p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="ord"><a href="#ord" class="headerlink" title="ord"></a>ord</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="number">97</span></span><br></pre></td></tr></table></figure><h4 id="chr"><a href="#chr" class="headerlink" title="chr"></a>chr</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">chr</span>(<span class="number">97</span>)</span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure><h4 id="str"><a href="#str" class="headerlink" title="str"></a>str</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">str</span>(<span class="number">123.456</span>)</span><br><span class="line"><span class="number">123.456</span></span><br></pre></td></tr></table></figure><h4 id="len-max-min"><a href="#len-max-min" class="headerlink" title="len&amp;max&amp;min"></a>len&amp;max&amp;min</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = <span class="string">&quot;Python&quot;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">len</span>(s)</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(s)</span><br><span class="line"><span class="string">&#x27;y&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">min</span>(s)</span><br><span class="line"><span class="string">&#x27;P&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p><code>\n</code> <code>\t</code> <code>\\</code> <code>\&#39;</code> <code>\&quot;</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;\101&#x27;</span>, <span class="string">&#x27;x41&#x27;</span>)</span><br><span class="line">A A</span><br></pre></td></tr></table></figure><p><code>\ddd</code> :八进制</p><p><code>\xhh</code> :十六进制</p><h4 id="原生字符串"><a href="#原生字符串" class="headerlink" title="原生字符串"></a>原生字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = <span class="string">&#x27;123\t456&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(s)</span><br><span class="line"><span class="number">123</span><span class="number">456</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;s = <span class="string">r&#x27;123\t456&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(s)</span><br><span class="line"><span class="number">123</span>\t456</span><br></pre></td></tr></table></figure><h4 id="end"><a href="#end" class="headerlink" title="end"></a>end</h4><p><code>print(&#39;abc&#39;, end = &#39;&#39;)</code> 结束字符串</p><h4 id="sep"><a href="#sep" class="headerlink" title="sep"></a>sep</h4><p><code>print(&#39;abc&#39;, &#39;def&#39;, sep = &#39;&#39;)</code> 分隔字符串</p><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">format</span>(<span class="string">&#x27;Welcome to python!&#x27;</span>, <span class="string">&#x27;&gt;20s&#x27;</span>))</span><br><span class="line">  Welcome to python!</span><br></pre></td></tr></table></figure><ol><li>没有&gt;时，字符串默认左对齐</li><li>右对齐，总长度20个字符</li><li>宽度会随着字符串超长而自动扩展</li></ol><h5 id="s-center"><a href="#s-center" class="headerlink" title="s.center"></a>s.center</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.center(<span class="number">10</span>, <span class="string">&#x27;$&#x27;</span>)</span><br></pre></td></tr></table></figure><p>居中，用’$’符号填充</p><h5 id="s-ljust"><a href="#s-ljust" class="headerlink" title="s.ljust"></a>s.ljust</h5><p>居左</p><h5 id="s-rjust"><a href="#s-rjust" class="headerlink" title="s.rjust"></a>s.rjust</h5><p>居右</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ol><li>字符串是不可变对象，不能用索引改变</li><li>不能越界</li></ol><h4 id="测试字符串"><a href="#测试字符串" class="headerlink" title="测试字符串"></a>测试字符串</h4><h5 id="s-isalnum"><a href="#s-isalnum" class="headerlink" title="s.isalnum"></a>s.isalnum</h5><p>全部字母，数字</p><h5 id="s-isalpha"><a href="#s-isalpha" class="headerlink" title="s.isalpha"></a>s.isalpha</h5><p>全部字母</p><h5 id="s-isdigit"><a href="#s-isdigit" class="headerlink" title="s.isdigit"></a>s.isdigit</h5><p>全部数字</p><h5 id="s-isidentifier"><a href="#s-isidentifier" class="headerlink" title="s.isidentifier"></a>s.isidentifier</h5><p>标识符</p><h5 id="s-islower"><a href="#s-islower" class="headerlink" title="s.islower"></a>s.islower</h5><p>全部小写</p><h5 id="s-isupper"><a href="#s-isupper" class="headerlink" title="s.isupper"></a>s.isupper</h5><p>全部大写</p><h5 id="s-isspace"><a href="#s-isspace" class="headerlink" title="s.isspace"></a>s.isspace</h5><p>全部空白字符</p><ul><li>空白字符:<code>\n</code> ,<code>\t</code> 等</li></ul><h4 id="转换字符串"><a href="#转换字符串" class="headerlink" title="转换字符串"></a>转换字符串</h4><h5 id="s-capitalize"><a href="#s-capitalize" class="headerlink" title="s.capitalize"></a>s.capitalize</h5><p>首字母大写</p><h5 id="s-title"><a href="#s-title" class="headerlink" title="s.title"></a>s.title</h5><p>每个单词首字母大写</p><h5 id="s-swapcase"><a href="#s-swapcase" class="headerlink" title="s.swapcase"></a>s.swapcase</h5><p>大小写互换</p><h5 id="s-replace-old-new-count"><a href="#s-replace-old-new-count" class="headerlink" title="s.replace(old, new, count)"></a>s.replace(old, new, count)</h5><p>替换</p><h4 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h4><h5 id="s-lstrip-char"><a href="#s-lstrip-char" class="headerlink" title="s.lstrip(char)"></a>s.lstrip(char)</h5><p>左端</p><h5 id="s-rstrip-char"><a href="#s-rstrip-char" class="headerlink" title="s.rstrip(char)"></a>s.rstrip(char)</h5><p>右端</p><h5 id="s-strip-char"><a href="#s-strip-char" class="headerlink" title="s.strip(char)"></a>s.strip(char)</h5><p>两端</p><h4 id="搜索字符串"><a href="#搜索字符串" class="headerlink" title="搜索字符串"></a>搜索字符串</h4><h5 id="s-endswith-char-start-end"><a href="#s-endswith-char-start-end" class="headerlink" title="s.endswith(char, start, end)"></a>s.endswith(char, start, end)</h5><p>是否以指定字符串结尾</p><h5 id="s-startswith-char-start-end"><a href="#s-startswith-char-start-end" class="headerlink" title="s.startswith(char, start, end)"></a>s.startswith(char, start, end)</h5><p>是否以指定字符串开头</p><h5 id="s-find-index-char-start-end"><a href="#s-find-index-char-start-end" class="headerlink" title="s.find&#x2F;index(char, start, end)"></a>s.find&#x2F;index(char, start, end)</h5><p>首次出现索引</p><h5 id="s-rfind-rindex-char-start-end"><a href="#s-rfind-rindex-char-start-end" class="headerlink" title="s.rfind&#x2F;rindex(char, start, end)"></a>s.rfind&#x2F;rindex(char, start, end)</h5><p>最后出现索引</p><h5 id="s-count-char-start-end"><a href="#s-count-char-start-end" class="headerlink" title="s.count(char, start, end)"></a>s.count(char, start, end)</h5><p>记录出现次数</p><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><h5 id="join"><a href="#join" class="headerlink" title="join"></a>join</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;boy&#x27;</span>]</span><br><span class="line"><span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>)</span><br><span class="line"><span class="string">&#x27;I am boy&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="逆序和排序"><a href="#逆序和排序" class="headerlink" title="逆序和排序"></a>逆序和排序</h4><h5 id="reversed-s"><a href="#reversed-s" class="headerlink" title="reversed(s)"></a>reversed(s)</h5><p>返回逆序后所有字符组成的可迭代对象,使用join将其转换成字符串并输出</p><h5 id="sorted-s-key-None-reverse-False"><a href="#sorted-s-key-None-reverse-False" class="headerlink" title="sorted(s, key &#x3D; None, reverse &#x3D; False)"></a>sorted(s, key &#x3D; None, reverse &#x3D; False)</h5><p>以ASCII顺序排列的可迭代对象</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>任何元素的序列,可以包含不同元素</p><p><code>list = []</code> </p><h4 id="len-max-min-sum"><a href="#len-max-min-sum" class="headerlink" title="len&amp;max&amp;min&amp;sum"></a>len&amp;max&amp;min&amp;sum</h4><p>min,max:相同类型元素</p><p>sum:数字</p><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;items = <span class="string">&quot;xwj is shaby&quot;</span>.split()</span><br><span class="line">&gt;&gt;&gt;items</span><br><span class="line">[<span class="string">&#x27;xwj&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;shaby&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">list</span> = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span> = <span class="built_in">list</span>(<span class="string">&quot;abcd&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h4><p>随机排列列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">shuffle(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><h4 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h4><p><code>list = [value for value in range(0, 11)]</code> </p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><h5 id="list-append"><a href="#list-append" class="headerlink" title="list.append"></a>list.append</h5><p>列表+元素</p><h5 id="list-extend"><a href="#list-extend" class="headerlink" title="list.extend"></a>list.extend</h5><p>列表+列表</p><h5 id="list-insert-index-x"><a href="#list-insert-index-x" class="headerlink" title="list.insert(index, x)"></a>list.insert(index, x)</h5><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><h5 id="list-pop-index"><a href="#list-pop-index" class="headerlink" title="list.pop(index)"></a>list.pop(index)</h5><h5 id="list-remove"><a href="#list-remove" class="headerlink" title="list.remove"></a>list.remove</h5><p>删除第一个匹配项</p><h5 id="del-list-start-end"><a href="#del-list-start-end" class="headerlink" title="del list[start:end]"></a>del list[start:end]</h5><p>删除一个或多个元素或整个列表(整个列表,不是元素)</p><h5 id="list-clear"><a href="#list-clear" class="headerlink" title="list.clear"></a>list.clear</h5><p>删除列表中所有元素</p><h4 id="list-count"><a href="#list-count" class="headerlink" title="list.count"></a>list.count</h4><p>返回元素在列表中出现次数</p><h4 id="list-index-element"><a href="#list-index-element" class="headerlink" title="list.index(element)"></a>list.index(element)</h4><p>返回元素在列表中第一次出现的下标</p><h4 id="逆序和排序-1"><a href="#逆序和排序-1" class="headerlink" title="逆序和排序"></a>逆序和排序</h4><h5 id="list-reverse"><a href="#list-reverse" class="headerlink" title="list.reverse()"></a>list.reverse()</h5><p>只能逆序列表</p><h5 id="reversed-seq"><a href="#reversed-seq" class="headerlink" title="reversed(seq)"></a>reversed(seq)</h5><ol><li>逆序列表,字符串,元组等</li><li>生成新的</li><li>返回可迭代对象，需要转换成序列类型</li></ol><h5 id="list-sort-key-None-reverse-False"><a href="#list-sort-key-None-reverse-False" class="headerlink" title="list.sort(key &#x3D; None, reverse &#x3D; False)"></a>list.sort(key &#x3D; None, reverse &#x3D; False)</h5><p>只能升序，降序列表</p><h5 id="sorted-seq-key-None-reverse-False"><a href="#sorted-seq-key-None-reverse-False" class="headerlink" title="sorted(seq, key &#x3D; None, reverse &#x3D; False)"></a>sorted(seq, key &#x3D; None, reverse &#x3D; False)</h5><ol><li>升降序列表,字符串,元组等</li><li>生成新的列表</li></ol><h4 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h4><h5 id="同一对象"><a href="#同一对象" class="headerlink" title="同一对象"></a>同一对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lista = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">listb = lista</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;lista <span class="keyword">is</span> listb</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h5><p>嵌套列表仍然会产生关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">b = [value <span class="keyword">for</span> value <span class="keyword">in</span> a]</span><br><span class="line">b = [] + a</span><br><span class="line">b = <span class="built_in">list</span>[a]</span><br><span class="line">b = a[:]</span><br><span class="line">b = a.copy()</span><br></pre></td></tr></table></figure><h5 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h5><p>无论几层嵌套都不会产生关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b = deepcopy(a)</span><br></pre></td></tr></table></figure><h4 id="二维列表"><a href="#二维列表" class="headerlink" title="二维列表"></a>二维列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">m = []</span><br><span class="line">rows = <span class="number">3</span></span><br><span class="line">cols = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">    m.append([])</span><br><span class="line">    line = [<span class="built_in">eval</span>(value) <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">        m[row].append(line[col])</span><br><span class="line">print_m()</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>任何元素的序列,可以包含不同元素</p><p><code>tuple = ()</code> </p><p><code>tuple = (1,)</code> :元组而非整数对象</p><p><strong>元素值无法直接修改</strong></p><h4 id="len-max-min-sum-1"><a href="#len-max-min-sum-1" class="headerlink" title="len&amp;max&amp;min&amp;sum"></a>len&amp;max&amp;min&amp;sum</h4><p>min,max:相同类型元素</p><p>sum:数字</p><h4 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = <span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;t = <span class="built_in">tuple</span>(<span class="string">&quot;abcd&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;t = <span class="built_in">tuple</span>([value <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)])</span><br></pre></td></tr></table></figure><h4 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> C++</span><br><span class="line"><span class="number">1</span> Java</span><br><span class="line"><span class="number">2</span> Python</span><br></pre></td></tr></table></figure><h4 id="t-count"><a href="#t-count" class="headerlink" title="t.count"></a>t.count</h4><p>返回元素在元组中出现次数</p><h4 id="t-index"><a href="#t-index" class="headerlink" title="t.index"></a>t.index</h4><p>返回元素第一次出现的下标</p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">z = <span class="built_in">zip</span>(x)</span><br><span class="line"><span class="built_in">tuple</span>(z)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;((<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,))</span><br></pre></td></tr></table></figure><ol><li>接收一个或多个序列作为参数</li><li>将元素打包成元组，返回元组组成的可迭代对象</li><li>使用tuple函数将这些对象转换成一个元组(或列表等)</li></ol><h4 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h4><h5 id="del-t"><a href="#del-t" class="headerlink" title="del t"></a>del t</h5><p>删除整个元组(整个元组，不是元素)</p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>键值对集合</p><p><code>dict = &#123;&quot;a&quot;:1, &quot;b&quot;:2, &quot;c&quot;:3&#125;</code> </p><h4 id="len"><a href="#len" class="headerlink" title="len"></a>len</h4><p>长度</p><h4 id="dict-get-key-dict-key"><a href="#dict-get-key-dict-key" class="headerlink" title="dict.get(key)&#x2F;dict[key]"></a>dict.get(key)&#x2F;dict[key]</h4><h4 id="dict-key-value"><a href="#dict-key-value" class="headerlink" title="dict[key] &#x3D; value"></a>dict[key] &#x3D; value</h4><p>修改值，若键不存在，则创建键值</p><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = <span class="built_in">dict</span>(((<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = <span class="built_in">dict</span>([[<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>], [<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = <span class="built_in">dict</span>(x = <span class="number">1</span>, y = <span class="number">2</span>, z = <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="string">&quot;xyz&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 字符串，列表，元组都可以</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = &#123;&#125;.fromkeys([<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>], <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 返回相同值的字典，默认值为None</span></span><br></pre></td></tr></table></figure><ol><li>接收一个或多个序列作为参数</li><li>将元素打包成元组，返回元组组成的可迭代对象</li></ol><h4 id="键的判断"><a href="#键的判断" class="headerlink" title="键的判断"></a>键的判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">hash</span>(balabala)</span><br><span class="line"><span class="comment"># 一个整数值-&gt;哈希码</span></span><br></pre></td></tr></table></figure><h4 id="删除键值"><a href="#删除键值" class="headerlink" title="删除键值"></a>删除键值</h4><h5 id="dict-pop-key"><a href="#dict-pop-key" class="headerlink" title="dict.pop(key)"></a>dict.pop(key)</h5><h5 id="dict-popitem"><a href="#dict-popitem" class="headerlink" title="dict.popitem()"></a>dict.popitem()</h5><p>删除最后一个键值并返回</p><h5 id="del-dict-balabala"><a href="#del-dict-balabala" class="headerlink" title="del dict[balabala]"></a>del dict[balabala]</h5><p>可以删除字典本身</p><h5 id="dict-clear"><a href="#dict-clear" class="headerlink" title="dict.clear()"></a>dict.clear()</h5><p>不删除字典本身</p><h4 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h4><h5 id="dict1-update-dict2-dict3"><a href="#dict1-update-dict2-dict3" class="headerlink" title="dict1.update(dict2, **dict3)"></a>dict1.update(dict2, **dict3)</h5><h4 id="字典解析"><a href="#字典解析" class="headerlink" title="字典解析"></a>字典解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = &#123;key:value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&quot;xyz&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = &#123;x:<span class="number">0.5</span> * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">if</span> x &lt; <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="获取键值"><a href="#获取键值" class="headerlink" title="获取键值"></a>获取键值</h4><h5 id="dict-keys"><a href="#dict-keys" class="headerlink" title="dict.keys()"></a>dict.keys()</h5><p>可迭代对象</p><h5 id="dict-values"><a href="#dict-values" class="headerlink" title="dict.values()"></a>dict.values()</h5><p>可迭代对象</p><h5 id="dict-items"><a href="#dict-items" class="headerlink" title="dict.items()"></a>dict.items()</h5><p>可迭代对象，每一个元素是元组</p><h4 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span> = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dict</span>.setdefault(<span class="string">&#x27;d&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 返回对应值；若无键，则创建后返回对应值；默认值为None</span></span><br></pre></td></tr></table></figure><h4 id="复制字典"><a href="#复制字典" class="headerlink" title="复制字典"></a>复制字典</h4><h5 id="dict-copy"><a href="#dict-copy" class="headerlink" title="dict.copy()"></a>dict.copy()</h5><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">dict</span>.items():</span><br><span class="line">    <span class="built_in">print</span>(key, value, sep = <span class="string">&#x27;&#x27;</span>, end = <span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">set</span> = <span class="built_in">set</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">set</span> = <span class="built_in">set</span>(<span class="string">&quot;abcab&quot;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="frozenset"><a href="#frozenset" class="headerlink" title="frozenset()"></a>frozenset()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">set</span> = <span class="built_in">frozenset</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">frozenset</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><h5 id="并集"><a href="#并集" class="headerlink" title="并集|"></a>并集|</h5><h5 id="交集"><a href="#交集" class="headerlink" title="交集&amp;"></a>交集&amp;</h5><h5 id="差集"><a href="#差集" class="headerlink" title="差集-"></a>差集-</h5><h5 id="对称差集"><a href="#对称差集" class="headerlink" title="对称差集^"></a>对称差集^</h5><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><h5 id="set1-issubset-set2"><a href="#set1-issubset-set2" class="headerlink" title="set1.issubset(set2)"></a>set1.issubset(set2)</h5><p>判断子集</p><h5 id="set2-issuperset-set1"><a href="#set2-issuperset-set1" class="headerlink" title="set2.issuperset(set1)"></a>set2.issuperset(set1)</h5><p>判断超集</p><h5 id="set1-union-set2"><a href="#set1-union-set2" class="headerlink" title="set1.union(set2)"></a>set1.union(set2)</h5><p>并集</p><h5 id="set1-intersection-set2"><a href="#set1-intersection-set2" class="headerlink" title="set1.intersection(set2)"></a>set1.intersection(set2)</h5><p>交集</p><h5 id="set1-difference-set2"><a href="#set1-difference-set2" class="headerlink" title="set1.difference(set2)"></a>set1.difference(set2)</h5><p>差集</p><h5 id="set1-symmetric-difference-set2"><a href="#set1-symmetric-difference-set2" class="headerlink" title="set1.symmetric_difference(set2)"></a>set1.symmetric_difference(set2)</h5><p>对称差集</p><h4 id="集合解析"><a href="#集合解析" class="headerlink" title="集合解析"></a>集合解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;value <span class="keyword">for</span> value <span class="keyword">in</span> set2 <span class="keyword">if</span> value &gt; <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h4><h5 id="set-add-element"><a href="#set-add-element" class="headerlink" title="set.add(element)"></a>set.add(element)</h5><h5 id="set1-update-set2"><a href="#set1-update-set2" class="headerlink" title="set1.update(set2)"></a>set1.update(set2)</h5><p>并集更新到set1</p><h5 id="set1-intersection-update-set2"><a href="#set1-intersection-update-set2" class="headerlink" title="set1.intersection_update(set2)"></a>set1.intersection_update(set2)</h5><p>交集更新到set1</p><h5 id="set1-difference-update-set2"><a href="#set1-difference-update-set2" class="headerlink" title="set1.difference_update(set2)"></a>set1.difference_update(set2)</h5><p>差集更新到set1</p><h5 id="set1-symmetric-difference-update-set2"><a href="#set1-symmetric-difference-update-set2" class="headerlink" title="set1.symmetric_difference_update(set2)"></a>set1.symmetric_difference_update(set2)</h5><p>对称差集更新到set1</p><h4 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h4><h5 id="set-pop"><a href="#set-pop" class="headerlink" title="set.pop()"></a>set.pop()</h5><h5 id="set-remove-element"><a href="#set-remove-element" class="headerlink" title="set.remove(element)"></a>set.remove(element)</h5><h5 id="set-discard-element"><a href="#set-discard-element" class="headerlink" title="set.discard(element)"></a>set.discard(element)</h5><h5 id="set-clear"><a href="#set-clear" class="headerlink" title="set.clear()"></a>set.clear()</h5><p>清除所有元素</p><h5 id="del-set"><a href="#del-set" class="headerlink" title="del set"></a>del set</h5><p>删除整个集合</p><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h4><h4 id="round"><a href="#round" class="headerlink" title="round"></a>round</h4><h4 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h4><h4 id="divmod"><a href="#divmod" class="headerlink" title="divmod"></a>divmod</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">divmod</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>(除数,余数)</p><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><p><code>help(abs)</code> </p><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p><code>import math</code> </p><h4 id="math-fabs"><a href="#math-fabs" class="headerlink" title="math.fabs"></a>math.fabs</h4><p>浮点绝对值</p><h4 id="math-ceil"><a href="#math-ceil" class="headerlink" title="math.ceil"></a>math.ceil</h4><p>向上取整</p><h4 id="math-floor"><a href="#math-floor" class="headerlink" title="math.floor"></a>math.floor</h4><p>向下取整</p><h4 id="math-trunc"><a href="#math-trunc" class="headerlink" title="math.trunc"></a>math.trunc</h4><p>整数部分</p><h4 id="math-modf"><a href="#math-modf" class="headerlink" title="math.modf"></a>math.modf</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> math</span><br><span class="line">&gt;&gt;&gt;math.modf(<span class="number">8.6</span>)</span><br><span class="line">(<span class="number">0.5999999999999996</span>, <span class="number">8.0</span>)</span><br></pre></td></tr></table></figure><p>(小数,整数)</p><h4 id="math-fmod-x-y"><a href="#math-fmod-x-y" class="headerlink" title="math.fmod(x,y)"></a>math.fmod(x,y)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> math</span><br><span class="line">&gt;&gt;&gt;math.fmod(<span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>取浮点模</p><h4 id="math-fsum-x-y-…"><a href="#math-fsum-x-y-…" class="headerlink" title="math.fsum([x,y, …])"></a>math.fsum([x,y, …])</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> math</span><br><span class="line">&gt;&gt;&gt;math.fsum([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>])</span><br><span class="line"><span class="number">0.6</span></span><br></pre></td></tr></table></figure><p>求浮点和</p><h4 id="math-factorial"><a href="#math-factorial" class="headerlink" title="math.factorial"></a>math.factorial</h4><p>求阶乘</p><h4 id="math-gcd-a-b"><a href="#math-gcd-a-b" class="headerlink" title="math.gcd(a,b)"></a>math.gcd(a,b)</h4><p>求最大公约数</p><h4 id="math-pow-a-b"><a href="#math-pow-a-b" class="headerlink" title="math.pow(a,b)"></a>math.pow(a,b)</h4><p>求次方</p><h4 id="math-exp"><a href="#math-exp" class="headerlink" title="math.exp"></a>math.exp</h4><p>求e的次方</p><h4 id="math-log"><a href="#math-log" class="headerlink" title="math.log"></a>math.log</h4><p>求e为底的对数</p><h4 id="math-log-x-base"><a href="#math-log-x-base" class="headerlink" title="math.log(x, base)"></a>math.log(x, base)</h4><p>求base为底的对数</p><h4 id="math-sqrt"><a href="#math-sqrt" class="headerlink" title="math.sqrt"></a>math.sqrt</h4><p>求平方根</p><h3 id="对象和方法"><a href="#对象和方法" class="headerlink" title="对象和方法"></a>对象和方法</h3><h4 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h4><p>id, type, value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;n = <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(n)</span><br><span class="line">?</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">type</span>(n)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;x = <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;y = x</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(x)</span><br><span class="line">?</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(y)</span><br><span class="line">?</span><br><span class="line">&gt;&gt;&gt;y = y + <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>id(x)</code> &#x3D;&#x3D; <code>id(y)</code> </p><p>后来的<code>id(y)</code>  !&#x3D; <code>id(x)</code> </p><ol><li>is&amp;is not是否为同一个对象</li><li>&#x3D;&#x3D;&amp;!&#x3D;是否完全相等</li></ol><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = <span class="string">&#x27;HELlo&#x27;</span></span><br><span class="line">&gt;&gt;&gt;s.lower()</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;s.upper()</span><br><span class="line"><span class="string">&#x27;HELLO&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="None"><a href="#None" class="headerlink" title="None"></a>None</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">type</span>(<span class="literal">None</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;NoneType&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h2><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><h3 id="成员关系运算符"><a href="#成员关系运算符" class="headerlink" title="成员关系运算符"></a>成员关系运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;s = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&gt;&gt;&gt;s <span class="keyword">in</span> <span class="built_in">list</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = <span class="string">&#x27;welcome&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;come&#x27;</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="对象身份运算符"><a href="#对象身份运算符" class="headerlink" title="对象身份运算符"></a>对象身份运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b = <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">id</span>(a) == <span class="built_in">id</span>(b)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;list2 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;list1 <span class="keyword">is</span> list2</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>每次创建列表时都会分配一个新的内存空间,虽然元素值相同,但是内存地址不同</p><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p><code>and</code> 和<code>or</code> 具有短路性</p><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> random</span><br><span class="line">&gt;&gt;&gt;random.random()</span><br><span class="line"><span class="comment"># [0, 1) - float</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;random.randint()</span><br><span class="line"><span class="comment"># [a, b] - int</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;random.randomrange()</span><br><span class="line"><span class="comment"># [a, b - 1] - int</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;random.sample(<span class="built_in">list</span>, k)</span><br><span class="line"><span class="comment"># [, , , ...] - a list</span></span><br></pre></td></tr></table></figure><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><h3 id="pass-break-continue"><a href="#pass-break-continue" class="headerlink" title="pass&amp;break&amp;continue"></a>pass&amp;break&amp;continue</h3><p><code>pass</code> 空语句,占位</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="没有返回值"><a href="#没有返回值" class="headerlink" title="没有返回值"></a>没有返回值</h3><p>默认返回<code>None</code></p><h3 id="返回单个值"><a href="#返回单个值" class="headerlink" title="返回单个值"></a>返回单个值</h3><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x, <span class="number">2</span> * x, <span class="number">3</span> * x, <span class="number">4</span> * x</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(f(x))</span><br><span class="line">(, , , ...)</span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;t1, t2, t3, t4 = f(x)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(t1, t2, t3, t4)</span><br><span class="line">? ? ? ?</span><br><span class="line"><span class="comment"># 若干个数</span></span><br></pre></td></tr></table></figure><h3 id="位置参数-关键字参数"><a href="#位置参数-关键字参数" class="headerlink" title="位置参数&amp;关键字参数"></a>位置参数&amp;关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params"><span class="built_in">str</span>, n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">f(<span class="string">&quot;nihao&quot;</span>, <span class="number">3</span>)</span><br><span class="line">f(n = <span class="number">3</span>, <span class="built_in">str</span> = <span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>位置参数要出现在任何关键字参数之前</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params"><span class="built_in">str</span> = <span class="string">&quot;pxy&quot;</span>, n = <span class="number">9</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">    </span><br><span class="line">f()</span><br></pre></td></tr></table></figure><p>默认值之后的任何参数都要指定默认值</p><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><p>实参:数字,字符串,布尔值,元组 -&gt;不改变</p><p>实参:列表,字典 -&gt;改变</p><h3 id="解包裹"><a href="#解包裹" class="headerlink" title="解包裹"></a>解包裹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">f(*<span class="built_in">tuple</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">f(**<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    y = <span class="number">9</span></span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    f()</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">main()</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># 2 3 2</span></span><br><span class="line"><span class="comment"># 9 5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    f()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">main()</span><br><span class="line"><span class="comment"># wrong</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> x<span class="comment"># 成功修改全局变量</span></span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># 2 2</span></span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x, y : x + y</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>定义简短函数,匿名函数</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iterable = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">result = <span class="built_in">map</span>(function, iterable)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment"># function对可迭代对象中的每个元素进行处理,返回所有处理后的元素构成的新可迭代对象</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iterable1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">iterable2 = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line">result = <span class="built_in">map</span>(function, iterable1, iterable2)</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="built_in">filter</span>(function, <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"><span class="comment"># [, , , ...]</span></span><br></pre></td></tr></table></figure><p>筛选：返回True的值</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="built_in">print</span>(functools.reduce(function, [, , , ...], x))</span><br></pre></td></tr></table></figure><h2 id="字符串、列表和元组"><a href="#字符串、列表和元组" class="headerlink" title="字符串、列表和元组"></a>字符串、列表和元组</h2><h3 id="单一数据类型"><a href="#单一数据类型" class="headerlink" title="单一数据类型"></a>单一数据类型</h3><h3 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h3><h4 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h4><ol><li><p>字符串</p></li><li><p>列表</p></li><li><p>元组</p></li></ol><h4 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h4><h4 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h4><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>UTF-8与ASCII兼容</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><code>import re</code> </p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h2 id="字典和集合"><a href="#字典和集合" class="headerlink" title="字典和集合"></a>字典和集合</h2><h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><ul><li>对象：类的实例</li><li>类：创建对象的模板</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius=<span class="number">1</span></span>):</span><br><span class="line">        self.radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> * self.radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * self.radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Circle()</span><br><span class="line"><span class="built_in">print</span>(c.radius)</span><br><span class="line"><span class="built_in">print</span>(c.get_perimeter())</span><br><span class="line"><span class="built_in">print</span>(c.get_area())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象作为函数参数"><a href="#对象作为函数参数" class="headerlink" title="对象作为函数参数"></a>对象作为函数参数</h3><h3 id="对象列表"><a href="#对象列表" class="headerlink" title="对象列表"></a>对象列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius=<span class="number">1</span></span>):</span><br><span class="line">        self.radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> * self.radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * self.radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">total_area</span>(<span class="params">c</span>):</span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        total += c[i].get_area()</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_area</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="built_in">print</span>(c[i].radius, c[i].get_area())</span><br><span class="line">    <span class="built_in">print</span>(total_area(c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">circle_lst = [Circle(), Circle(<span class="number">2</span>), Circle(<span class="number">3</span>)]</span><br><span class="line">print_area(circle_lst)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="私有数据域的访问"><a href="#私有数据域的访问" class="headerlink" title="私有数据域的访问"></a>私有数据域的访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius=<span class="number">1</span></span>):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 公用更改器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_radius</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 公用访问器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_radius</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> * self.__radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * self.__radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义属性</span></span><br><span class="line">    radius = <span class="built_in">property</span>(get_radius, set_radius)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Circle()</span><br><span class="line"><span class="comment"># 通过更改器和访问器更改和访问</span></span><br><span class="line">c.set_radius(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(c.get_radius())</span><br><span class="line"><span class="comment"># 通过属性更改和访问</span></span><br><span class="line">c.radius = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(c.radius)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius=<span class="number">1</span></span>):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> * self.__radius</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * self.__radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">radius</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__radius</span><br><span class="line"></span><br><span class="line"><span class="meta">    @radius.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">radius</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Circle()</span><br><span class="line"><span class="built_in">print</span>(c.radius)</span><br><span class="line"><span class="built_in">print</span>(c.get_perimeter)</span><br><span class="line"><span class="built_in">print</span>(c.get_area)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">c.radius = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(c.radius)</span><br><span class="line"><span class="built_in">print</span>(c.get_perimeter)</span><br><span class="line"><span class="built_in">print</span>(c.get_area)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类变量、类方法和静态方法"><a href="#类变量、类方法和静态方法" class="headerlink" title="类变量、类方法和静态方法"></a>类变量、类方法和静态方法</h3><p>类变量：所有对象的共享变量，通用性</p><p>类方法：只能访问类变量，可以通过类名或对象名调用</p><p>静态方法：存放在类中的一个函数，与类本身无关，只能访问类变量，可以通过类名或对象名调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    __number_of_object = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius=<span class="number">1</span></span>):</span><br><span class="line">        self.__radius = radius</span><br><span class="line">        <span class="comment"># 类变量</span></span><br><span class="line">        Circle.__number_of_object += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> * self.__radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * self.__radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_radius</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__radius</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法访问类变量</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">class_method_get_number</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.__number_of_object</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法访问类变量</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">static_method_get_number</span>():</span><br><span class="line">        <span class="keyword">return</span> Circle.__number_of_object</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">total_area</span>(<span class="params">c</span>):</span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        total += c[i].get_area()</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_area</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="built_in">print</span>(c[i].get_radius(), c[i].get_area())</span><br><span class="line">    <span class="built_in">print</span>(total_area(c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">circle_lst = [Circle(), Circle(<span class="number">2</span>), Circle(<span class="number">3</span>)]</span><br><span class="line">print_area(circle_lst)</span><br><span class="line"><span class="comment"># 通过类名</span></span><br><span class="line"><span class="built_in">print</span>(Circle.class_method_get_number(), Circle.static_method_get_number())</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 通过对象名</span></span><br><span class="line"><span class="built_in">print</span>(circle_lst[<span class="number">0</span>].class_method_get_number(), circle_lst[<span class="number">0</span>].static_method_get_number())</span><br><span class="line"><span class="built_in">print</span>(circle_lst[<span class="number">1</span>].class_method_get_number(), circle_lst[<span class="number">1</span>].static_method_get_number())</span><br><span class="line"><span class="built_in">print</span>(circle_lst[<span class="number">2</span>].class_method_get_number(), circle_lst[<span class="number">2</span>].static_method_get_number())</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">c1 = Circle(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c1.class_method_get_number(), c1.static_method_get_number())</span><br><span class="line">c2 = Circle(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c2.class_method_get_number(), c2.static_method_get_number())</span><br><span class="line">c3 = Circle(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c3.class_method_get_number(), c3.static_method_get_number())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重载和特殊方法"><a href="#重载和特殊方法" class="headerlink" title="重载和特殊方法"></a>重载和特殊方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius=<span class="number">1</span></span>):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_radius</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_radius</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__radius == other.__radius</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__radius != other.__radius</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = Circle(<span class="number">5</span>)</span><br><span class="line">c2 = Circle(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 == c2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h3><h4 id="str-和-repr"><a href="#str-和-repr" class="headerlink" title="__ str __ 和 __ repr __"></a>__ str __ 和 __ repr __</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s, %s, %d&quot;</span> % (self.__name, self.__gender, self.__age)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sfy = Person(<span class="string">&quot;沈飞扬&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(sfy)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(sfy))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关系运算特殊方法重定义"><a href="#关系运算特殊方法重定义" class="headerlink" title="关系运算特殊方法重定义"></a>关系运算特殊方法重定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(%s, %s, %d)&quot;</span> % (self.__name, self.__gender, self.__age)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 小于重构：形成升序排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age &lt; other.__age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = [Person(<span class="string">&quot;pxy&quot;</span>, <span class="string">&#x27;fm&#x27;</span>, <span class="number">20</span>), Person(<span class="string">&quot;sfy&quot;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="number">19</span>), Person(<span class="string">&quot;zcy&quot;</span>, <span class="string">&#x27;fm&#x27;</span>, <span class="number">18</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst = <span class="built_in">sorted</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="len-1"><a href="#len-1" class="headerlink" title="__ len __"></a>__ len __</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.__name = args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.__name)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person = Person(<span class="string">&quot;sfy&quot;</span>, <span class="string">&quot;pxy&quot;</span>, <span class="string">&quot;zcy&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(person)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(person))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IT?!</title>
      <link href="/blog/2004/10/28/it/"/>
      <url>/blog/2004/10/28/it/</url>
      
        <content type="html"><![CDATA[<h1 id="🤣👈"><a href="#🤣👈" class="headerlink" title="🤣👈"></a>🤣👈</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
